/*
* ovpncli -- Library for wrapping openvpn3 (https://github.com/OpenVPN/openvpn3) functionality in go way.
* Copyright (C) 2022 Vai3soh
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU Affero General Public License Version 3
* as published by the Free Software Foundation.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Affero General Public License for more details.

* You should have received a copy of the GNU Affero General Public License
* along with this program in the COPYING file.
* If not, see <http://www.gnu.org/licenses/>.
 */
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

// source: /ovpn3/core/client/ovpncli.i

#ifndef SWIG_ovpncli_WRAP_H_
#define SWIG_ovpncli_WRAP_H_

class Swig_memory;

class SwigDirector_ClientAPI_OpenVPNClient : public openvpn::ClientAPI::OpenVPNClient
{
 public:
  SwigDirector_ClientAPI_OpenVPNClient(int swig_p);
  bool _swig_upcall_tun_builder_new() {
    return openvpn::TunBuilderBase::tun_builder_new();
  }
  virtual bool tun_builder_new();
  bool _swig_upcall_tun_builder_set_layer(int layer) {
    return openvpn::TunBuilderBase::tun_builder_set_layer(layer);
  }
  virtual bool tun_builder_set_layer(int layer);
  bool _swig_upcall_tun_builder_set_remote_address(std::string const &address,bool ipv6) {
    return openvpn::TunBuilderBase::tun_builder_set_remote_address(address,ipv6);
  }
  virtual bool tun_builder_set_remote_address(std::string const &address,bool ipv6);
  bool _swig_upcall_tun_builder_add_address(std::string const &address,int prefix_length,std::string const &gateway,bool ipv6,bool net30) {
    return openvpn::TunBuilderBase::tun_builder_add_address(address,prefix_length,gateway,ipv6,net30);
  }
  virtual bool tun_builder_add_address(std::string const &address,int prefix_length,std::string const &gateway,bool ipv6,bool net30);
  bool _swig_upcall_tun_builder_set_route_metric_default(int metric) {
    return openvpn::TunBuilderBase::tun_builder_set_route_metric_default(metric);
  }
  virtual bool tun_builder_set_route_metric_default(int metric);
  bool _swig_upcall_tun_builder_reroute_gw(bool ipv4,bool ipv6,unsigned int flags) {
    return openvpn::TunBuilderBase::tun_builder_reroute_gw(ipv4,ipv6,flags);
  }
  virtual bool tun_builder_reroute_gw(bool ipv4,bool ipv6,unsigned int flags);
  bool _swig_upcall_tun_builder_add_route(std::string const &address,int prefix_length,int metric,bool ipv6) {
    return openvpn::TunBuilderBase::tun_builder_add_route(address,prefix_length,metric,ipv6);
  }
  virtual bool tun_builder_add_route(std::string const &address,int prefix_length,int metric,bool ipv6);
  bool _swig_upcall_tun_builder_exclude_route(std::string const &address,int prefix_length,int metric,bool ipv6) {
    return openvpn::TunBuilderBase::tun_builder_exclude_route(address,prefix_length,metric,ipv6);
  }
  virtual bool tun_builder_exclude_route(std::string const &address,int prefix_length,int metric,bool ipv6);
  bool _swig_upcall_tun_builder_add_dns_server(std::string const &address,bool ipv6) {
    return openvpn::TunBuilderBase::tun_builder_add_dns_server(address,ipv6);
  }
  virtual bool tun_builder_add_dns_server(std::string const &address,bool ipv6);
  bool _swig_upcall_tun_builder_add_search_domain(std::string const &domain) {
    return openvpn::TunBuilderBase::tun_builder_add_search_domain(domain);
  }
  virtual bool tun_builder_add_search_domain(std::string const &domain);
  bool _swig_upcall_tun_builder_set_mtu(int mtu) {
    return openvpn::TunBuilderBase::tun_builder_set_mtu(mtu);
  }
  virtual bool tun_builder_set_mtu(int mtu);
  bool _swig_upcall_tun_builder_set_session_name(std::string const &name) {
    return openvpn::TunBuilderBase::tun_builder_set_session_name(name);
  }
  virtual bool tun_builder_set_session_name(std::string const &name);
  bool _swig_upcall_tun_builder_add_proxy_bypass(std::string const &bypass_host) {
    return openvpn::TunBuilderBase::tun_builder_add_proxy_bypass(bypass_host);
  }
  virtual bool tun_builder_add_proxy_bypass(std::string const &bypass_host);
  bool _swig_upcall_tun_builder_set_proxy_auto_config_url(std::string const &url) {
    return openvpn::TunBuilderBase::tun_builder_set_proxy_auto_config_url(url);
  }
  virtual bool tun_builder_set_proxy_auto_config_url(std::string const &url);
  bool _swig_upcall_tun_builder_set_proxy_http(std::string const &host,int port) {
    return openvpn::TunBuilderBase::tun_builder_set_proxy_http(host,port);
  }
  virtual bool tun_builder_set_proxy_http(std::string const &host,int port);
  bool _swig_upcall_tun_builder_set_proxy_https(std::string const &host,int port) {
    return openvpn::TunBuilderBase::tun_builder_set_proxy_https(host,port);
  }
  virtual bool tun_builder_set_proxy_https(std::string const &host,int port);
  bool _swig_upcall_tun_builder_add_wins_server(std::string const &address) {
    return openvpn::TunBuilderBase::tun_builder_add_wins_server(address);
  }
  virtual bool tun_builder_add_wins_server(std::string const &address);
  bool _swig_upcall_tun_builder_set_allow_family(int af,bool allow) {
    return openvpn::TunBuilderBase::tun_builder_set_allow_family(af,allow);
  }
  virtual bool tun_builder_set_allow_family(int af,bool allow);
  bool _swig_upcall_tun_builder_set_adapter_domain_suffix(std::string const &name) {
    return openvpn::TunBuilderBase::tun_builder_set_adapter_domain_suffix(name);
  }
  virtual bool tun_builder_set_adapter_domain_suffix(std::string const &name);
  int _swig_upcall_tun_builder_establish() {
    return openvpn::TunBuilderBase::tun_builder_establish();
  }
  virtual int tun_builder_establish();
  bool _swig_upcall_tun_builder_persist() {
    return openvpn::TunBuilderBase::tun_builder_persist();
  }
  virtual bool tun_builder_persist();
  std::vector< std::string > const _swig_upcall_tun_builder_get_local_networks(bool ipv6) {
    return openvpn::TunBuilderBase::tun_builder_get_local_networks(ipv6);
  }
  virtual std::vector< std::string > const tun_builder_get_local_networks(bool ipv6);
  void _swig_upcall_tun_builder_establish_lite() {
    openvpn::TunBuilderBase::tun_builder_establish_lite();
  }
  virtual void tun_builder_establish_lite();
  void _swig_upcall_tun_builder_teardown(bool disconnect) {
    openvpn::TunBuilderBase::tun_builder_teardown(disconnect);
  }
  virtual void tun_builder_teardown(bool disconnect);
  virtual ~SwigDirector_ClientAPI_OpenVPNClient();
  virtual void log(openvpn::ClientAPI::LogInfo const &arg0);
  bool _swig_upcall_socket_protect(int socket,std::string remote,bool ipv6) {
    return openvpn::ClientAPI::OpenVPNClient::socket_protect(socket,remote,ipv6);
  }
  virtual bool socket_protect(int socket,std::string remote,bool ipv6);
  virtual bool pause_on_connection_timeout();
  virtual void event(openvpn::ClientAPI::Event const &arg0);
  virtual void external_pki_cert_request(openvpn::ClientAPI::ExternalPKICertRequest &arg0);
  virtual void external_pki_sign_request(openvpn::ClientAPI::ExternalPKISignRequest &arg0);
  bool _swig_upcall_remote_override_enabled() {
    return openvpn::ClientAPI::OpenVPNClient::remote_override_enabled();
  }
  virtual bool remote_override_enabled();
  void _swig_upcall_remote_override(openvpn::ClientAPI::RemoteOverride &arg0) {
    openvpn::ClientAPI::OpenVPNClient::remote_override(arg0);
  }
  virtual void remote_override(openvpn::ClientAPI::RemoteOverride &arg0);
  void _swig_upcall_clock_tick() {
    openvpn::ClientAPI::OpenVPNClient::clock_tick();
  }
  virtual void clock_tick();
  void _swig_upcall_connect_attach() {
    openvpn::ClientAPI::OpenVPNClient::connect_attach();
  }
  virtual void connect_attach();
  void _swig_upcall_connect_pre_run() {
    openvpn::ClientAPI::OpenVPNClient::connect_pre_run();
  }
  virtual void connect_pre_run();
  void _swig_upcall_connect_run() {
    openvpn::ClientAPI::OpenVPNClient::connect_run();
  }
  virtual void connect_run();
  void _swig_upcall_connect_session_stop() {
    openvpn::ClientAPI::OpenVPNClient::connect_session_stop();
  }
  virtual void connect_session_stop();
  openvpn::Stop *_swig_upcall_get_async_stop() {
    return openvpn::ClientAPI::OpenVPNClient::get_async_stop();
  }
  virtual openvpn::Stop *get_async_stop();
 private:
  intgo go_val;
  Swig_memory *swig_mem;
};

#endif
