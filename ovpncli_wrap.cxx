/*
* ovpncli -- Library for wrapping openvpn3 (https://github.com/OpenVPN/openvpn3) functionality in go way.
* Copyright (C) 2022 Vai3soh
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU Affero General Public License Version 3
* as published by the Free Software Foundation.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Affero General Public License for more details.

* You should have received a copy of the GNU Affero General Public License
* along with this program in the COPYING file.
* If not, see <http://www.gnu.org/licenses/>.
 */
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

// source: /ovpn3/core/client/ovpncli.i



#define SWIG_VERSION 0x040100
#define SWIGGO
#define SWIGMODULE ovpncli
#define SWIGGO_PREFIX go.ovpncli
#define SWIG_DIRECTORS
#pragma GCC diagnostic ignored "-Wunused-but-set-variable"
#pragma GCC diagnostic ignored "-Wunused-function"
/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>



typedef long long intgo;
typedef unsigned long long uintgo;



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;



#define SWIGGO_GCCGO

#ifdef __cplusplus
extern "C" {
#endif
extern void *_cgo_allocate(size_t);
extern void _cgo_panic(const char *);
#ifdef __cplusplus
}
#endif

#define _swig_goallocate _cgo_allocate
#define _swig_gopanic _cgo_panic


static _gostring_ Swig_AllocateString(const char *p, size_t l) {
  _gostring_ ret;
  ret.p = (char*)malloc(l);
  memcpy(ret.p, p, l);
  ret.n = l;
  return ret;
}

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Go proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#include <exception>
#include <map>

namespace Swig {

  class DirectorException : public std::exception {
  };
}

/* Handle memory management for directors.  */

namespace {
  struct GCItem {
    virtual ~GCItem() {}
  };

  struct GCItem_var {
    GCItem_var(GCItem *item = 0) : _item(item) {
    }

    GCItem_var& operator=(GCItem *item) {
      GCItem *tmp = _item;
      _item = item;
      delete tmp;
      return *this;
    }

    ~GCItem_var() {
      delete _item;
    }

    GCItem* operator->() {
      return _item;
    }

    private:
      GCItem *_item;
  };

  template <typename Type>
  struct GCItem_T : GCItem {
    GCItem_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCItem_T() {
      delete _ptr;
    }

  private:
    Type *_ptr;
  };
}

class Swig_memory {
public:
  template <typename Type>
  void swig_acquire_pointer(Type* vptr) {
    if (vptr) {
      swig_owner[vptr] = new GCItem_T<Type>(vptr);
    }
  }
private:
  typedef std::map<void *, GCItem_var> swig_ownership_map;
  swig_ownership_map swig_owner;
};

template <typename Type>
static void swig_acquire_pointer(Swig_memory** pmem, Type* ptr) {
  if (!pmem) {
    *pmem = new Swig_memory;
  }
  (*pmem)->swig_acquire_pointer(ptr);
}

#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


static void Swig_free(void* p) {
  free(p);
}

static void* Swig_malloc(int c) {
  return malloc(c);
}


#include <string>


#include <vector>
#include <stdexcept>


#include "ovpncli.hpp"

SWIGINTERN std::vector< openvpn::ClientAPI::ServerEntry >::const_reference std_vector_Sl_openvpn_ClientAPI_ServerEntry_Sg__get(std::vector< openvpn::ClientAPI::ServerEntry > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_openvpn_ClientAPI_ServerEntry_Sg__set(std::vector< openvpn::ClientAPI::ServerEntry > *self,int i,std::vector< openvpn::ClientAPI::ServerEntry >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< long long >::const_reference std_vector_Sl_long_SS_long_Sg__get(std::vector< long long > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_long_SS_long_Sg__set(std::vector< long long > *self,int i,std::vector< long long >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

// C++ director class methods.
#include "ovpncli_wrap.h"

SwigDirector_ClientAPI_OpenVPNClient::SwigDirector_ClientAPI_OpenVPNClient(int swig_p)
    : openvpn::ClientAPI::OpenVPNClient(),
      go_val(swig_p), swig_mem(0)
{ }

extern "C" bool Swig_DirectorClientAPI_OpenVPNClient_callback_tun_builder_new_ovpncli_f208ab142d9be705(int);
bool SwigDirector_ClientAPI_OpenVPNClient::tun_builder_new() {
  bool c_result = SwigValueInit< bool >() ;
  bool result;
  
  result = Swig_DirectorClientAPI_OpenVPNClient_callback_tun_builder_new_ovpncli_f208ab142d9be705(go_val);
  c_result = (bool)result; 
  return c_result;
}

extern "C" bool Swig_DirectorClientAPI_OpenVPNClient_callback_tun_builder_set_layer_ovpncli_f208ab142d9be705(int, intgo arg2);
bool SwigDirector_ClientAPI_OpenVPNClient::tun_builder_set_layer(int layer) {
  bool c_result = SwigValueInit< bool >() ;
  bool result;
  intgo swig_arg2;
  
  swig_arg2 = (int)layer; 
  result = Swig_DirectorClientAPI_OpenVPNClient_callback_tun_builder_set_layer_ovpncli_f208ab142d9be705(go_val, swig_arg2);
  c_result = (bool)result; 
  return c_result;
}

extern "C" bool Swig_DirectorClientAPI_OpenVPNClient_callback_tun_builder_set_remote_address_ovpncli_f208ab142d9be705(int, _gostring_ arg2, bool arg3);
bool SwigDirector_ClientAPI_OpenVPNClient::tun_builder_set_remote_address(std::string const &address,bool ipv6) {
  bool c_result = SwigValueInit< bool >() ;
  bool result;
  _gostring_ swig_arg2;
  bool swig_arg3;
  
  swig_arg2 = Swig_AllocateString((&address)->data(), (&address)->length()); 
  swig_arg3 = (bool)ipv6; 
  result = Swig_DirectorClientAPI_OpenVPNClient_callback_tun_builder_set_remote_address_ovpncli_f208ab142d9be705(go_val, swig_arg2, swig_arg3);
  c_result = (bool)result; 
  return c_result;
}

extern "C" bool Swig_DirectorClientAPI_OpenVPNClient_callback_tun_builder_add_address_ovpncli_f208ab142d9be705(int, _gostring_ arg2, intgo arg3, _gostring_ arg4, bool arg5, bool arg6);
bool SwigDirector_ClientAPI_OpenVPNClient::tun_builder_add_address(std::string const &address,int prefix_length,std::string const &gateway,bool ipv6,bool net30) {
  bool c_result = SwigValueInit< bool >() ;
  bool result;
  _gostring_ swig_arg2;
  intgo swig_arg3;
  _gostring_ swig_arg4;
  bool swig_arg5;
  bool swig_arg6;
  
  swig_arg2 = Swig_AllocateString((&address)->data(), (&address)->length()); 
  swig_arg3 = (int)prefix_length; 
  swig_arg4 = Swig_AllocateString((&gateway)->data(), (&gateway)->length()); 
  swig_arg5 = (bool)ipv6; 
  swig_arg6 = (bool)net30; 
  result = Swig_DirectorClientAPI_OpenVPNClient_callback_tun_builder_add_address_ovpncli_f208ab142d9be705(go_val, swig_arg2, swig_arg3, swig_arg4, swig_arg5, swig_arg6);
  c_result = (bool)result; 
  return c_result;
}

extern "C" bool Swig_DirectorClientAPI_OpenVPNClient_callback_tun_builder_set_route_metric_default_ovpncli_f208ab142d9be705(int, intgo arg2);
bool SwigDirector_ClientAPI_OpenVPNClient::tun_builder_set_route_metric_default(int metric) {
  bool c_result = SwigValueInit< bool >() ;
  bool result;
  intgo swig_arg2;
  
  swig_arg2 = (int)metric; 
  result = Swig_DirectorClientAPI_OpenVPNClient_callback_tun_builder_set_route_metric_default_ovpncli_f208ab142d9be705(go_val, swig_arg2);
  c_result = (bool)result; 
  return c_result;
}

extern "C" bool Swig_DirectorClientAPI_OpenVPNClient_callback_tun_builder_reroute_gw_ovpncli_f208ab142d9be705(int, bool arg2, bool arg3, intgo arg4);
bool SwigDirector_ClientAPI_OpenVPNClient::tun_builder_reroute_gw(bool ipv4,bool ipv6,unsigned int flags) {
  bool c_result = SwigValueInit< bool >() ;
  bool result;
  bool swig_arg2;
  bool swig_arg3;
  intgo swig_arg4;
  
  swig_arg2 = (bool)ipv4; 
  swig_arg3 = (bool)ipv6; 
  swig_arg4 = (unsigned int)flags; 
  result = Swig_DirectorClientAPI_OpenVPNClient_callback_tun_builder_reroute_gw_ovpncli_f208ab142d9be705(go_val, swig_arg2, swig_arg3, swig_arg4);
  c_result = (bool)result; 
  return c_result;
}

extern "C" bool Swig_DirectorClientAPI_OpenVPNClient_callback_tun_builder_add_route_ovpncli_f208ab142d9be705(int, _gostring_ arg2, intgo arg3, intgo arg4, bool arg5);
bool SwigDirector_ClientAPI_OpenVPNClient::tun_builder_add_route(std::string const &address,int prefix_length,int metric,bool ipv6) {
  bool c_result = SwigValueInit< bool >() ;
  bool result;
  _gostring_ swig_arg2;
  intgo swig_arg3;
  intgo swig_arg4;
  bool swig_arg5;
  
  swig_arg2 = Swig_AllocateString((&address)->data(), (&address)->length()); 
  swig_arg3 = (int)prefix_length; 
  swig_arg4 = (int)metric; 
  swig_arg5 = (bool)ipv6; 
  result = Swig_DirectorClientAPI_OpenVPNClient_callback_tun_builder_add_route_ovpncli_f208ab142d9be705(go_val, swig_arg2, swig_arg3, swig_arg4, swig_arg5);
  c_result = (bool)result; 
  return c_result;
}

extern "C" bool Swig_DirectorClientAPI_OpenVPNClient_callback_tun_builder_exclude_route_ovpncli_f208ab142d9be705(int, _gostring_ arg2, intgo arg3, intgo arg4, bool arg5);
bool SwigDirector_ClientAPI_OpenVPNClient::tun_builder_exclude_route(std::string const &address,int prefix_length,int metric,bool ipv6) {
  bool c_result = SwigValueInit< bool >() ;
  bool result;
  _gostring_ swig_arg2;
  intgo swig_arg3;
  intgo swig_arg4;
  bool swig_arg5;
  
  swig_arg2 = Swig_AllocateString((&address)->data(), (&address)->length()); 
  swig_arg3 = (int)prefix_length; 
  swig_arg4 = (int)metric; 
  swig_arg5 = (bool)ipv6; 
  result = Swig_DirectorClientAPI_OpenVPNClient_callback_tun_builder_exclude_route_ovpncli_f208ab142d9be705(go_val, swig_arg2, swig_arg3, swig_arg4, swig_arg5);
  c_result = (bool)result; 
  return c_result;
}

extern "C" bool Swig_DirectorClientAPI_OpenVPNClient_callback_tun_builder_add_dns_server_ovpncli_f208ab142d9be705(int, _gostring_ arg2, bool arg3);
bool SwigDirector_ClientAPI_OpenVPNClient::tun_builder_add_dns_server(std::string const &address,bool ipv6) {
  bool c_result = SwigValueInit< bool >() ;
  bool result;
  _gostring_ swig_arg2;
  bool swig_arg3;
  
  swig_arg2 = Swig_AllocateString((&address)->data(), (&address)->length()); 
  swig_arg3 = (bool)ipv6; 
  result = Swig_DirectorClientAPI_OpenVPNClient_callback_tun_builder_add_dns_server_ovpncli_f208ab142d9be705(go_val, swig_arg2, swig_arg3);
  c_result = (bool)result; 
  return c_result;
}

extern "C" bool Swig_DirectorClientAPI_OpenVPNClient_callback_tun_builder_add_search_domain_ovpncli_f208ab142d9be705(int, _gostring_ arg2);
bool SwigDirector_ClientAPI_OpenVPNClient::tun_builder_add_search_domain(std::string const &domain) {
  bool c_result = SwigValueInit< bool >() ;
  bool result;
  _gostring_ swig_arg2;
  
  swig_arg2 = Swig_AllocateString((&domain)->data(), (&domain)->length()); 
  result = Swig_DirectorClientAPI_OpenVPNClient_callback_tun_builder_add_search_domain_ovpncli_f208ab142d9be705(go_val, swig_arg2);
  c_result = (bool)result; 
  return c_result;
}

extern "C" bool Swig_DirectorClientAPI_OpenVPNClient_callback_tun_builder_set_mtu_ovpncli_f208ab142d9be705(int, intgo arg2);
bool SwigDirector_ClientAPI_OpenVPNClient::tun_builder_set_mtu(int mtu) {
  bool c_result = SwigValueInit< bool >() ;
  bool result;
  intgo swig_arg2;
  
  swig_arg2 = (int)mtu; 
  result = Swig_DirectorClientAPI_OpenVPNClient_callback_tun_builder_set_mtu_ovpncli_f208ab142d9be705(go_val, swig_arg2);
  c_result = (bool)result; 
  return c_result;
}

extern "C" bool Swig_DirectorClientAPI_OpenVPNClient_callback_tun_builder_set_session_name_ovpncli_f208ab142d9be705(int, _gostring_ arg2);
bool SwigDirector_ClientAPI_OpenVPNClient::tun_builder_set_session_name(std::string const &name) {
  bool c_result = SwigValueInit< bool >() ;
  bool result;
  _gostring_ swig_arg2;
  
  swig_arg2 = Swig_AllocateString((&name)->data(), (&name)->length()); 
  result = Swig_DirectorClientAPI_OpenVPNClient_callback_tun_builder_set_session_name_ovpncli_f208ab142d9be705(go_val, swig_arg2);
  c_result = (bool)result; 
  return c_result;
}

extern "C" bool Swig_DirectorClientAPI_OpenVPNClient_callback_tun_builder_add_proxy_bypass_ovpncli_f208ab142d9be705(int, _gostring_ arg2);
bool SwigDirector_ClientAPI_OpenVPNClient::tun_builder_add_proxy_bypass(std::string const &bypass_host) {
  bool c_result = SwigValueInit< bool >() ;
  bool result;
  _gostring_ swig_arg2;
  
  swig_arg2 = Swig_AllocateString((&bypass_host)->data(), (&bypass_host)->length()); 
  result = Swig_DirectorClientAPI_OpenVPNClient_callback_tun_builder_add_proxy_bypass_ovpncli_f208ab142d9be705(go_val, swig_arg2);
  c_result = (bool)result; 
  return c_result;
}

extern "C" bool Swig_DirectorClientAPI_OpenVPNClient_callback_tun_builder_set_proxy_auto_config_url_ovpncli_f208ab142d9be705(int, _gostring_ arg2);
bool SwigDirector_ClientAPI_OpenVPNClient::tun_builder_set_proxy_auto_config_url(std::string const &url) {
  bool c_result = SwigValueInit< bool >() ;
  bool result;
  _gostring_ swig_arg2;
  
  swig_arg2 = Swig_AllocateString((&url)->data(), (&url)->length()); 
  result = Swig_DirectorClientAPI_OpenVPNClient_callback_tun_builder_set_proxy_auto_config_url_ovpncli_f208ab142d9be705(go_val, swig_arg2);
  c_result = (bool)result; 
  return c_result;
}

extern "C" bool Swig_DirectorClientAPI_OpenVPNClient_callback_tun_builder_set_proxy_http_ovpncli_f208ab142d9be705(int, _gostring_ arg2, intgo arg3);
bool SwigDirector_ClientAPI_OpenVPNClient::tun_builder_set_proxy_http(std::string const &host,int port) {
  bool c_result = SwigValueInit< bool >() ;
  bool result;
  _gostring_ swig_arg2;
  intgo swig_arg3;
  
  swig_arg2 = Swig_AllocateString((&host)->data(), (&host)->length()); 
  swig_arg3 = (int)port; 
  result = Swig_DirectorClientAPI_OpenVPNClient_callback_tun_builder_set_proxy_http_ovpncli_f208ab142d9be705(go_val, swig_arg2, swig_arg3);
  c_result = (bool)result; 
  return c_result;
}

extern "C" bool Swig_DirectorClientAPI_OpenVPNClient_callback_tun_builder_set_proxy_https_ovpncli_f208ab142d9be705(int, _gostring_ arg2, intgo arg3);
bool SwigDirector_ClientAPI_OpenVPNClient::tun_builder_set_proxy_https(std::string const &host,int port) {
  bool c_result = SwigValueInit< bool >() ;
  bool result;
  _gostring_ swig_arg2;
  intgo swig_arg3;
  
  swig_arg2 = Swig_AllocateString((&host)->data(), (&host)->length()); 
  swig_arg3 = (int)port; 
  result = Swig_DirectorClientAPI_OpenVPNClient_callback_tun_builder_set_proxy_https_ovpncli_f208ab142d9be705(go_val, swig_arg2, swig_arg3);
  c_result = (bool)result; 
  return c_result;
}

extern "C" bool Swig_DirectorClientAPI_OpenVPNClient_callback_tun_builder_add_wins_server_ovpncli_f208ab142d9be705(int, _gostring_ arg2);
bool SwigDirector_ClientAPI_OpenVPNClient::tun_builder_add_wins_server(std::string const &address) {
  bool c_result = SwigValueInit< bool >() ;
  bool result;
  _gostring_ swig_arg2;
  
  swig_arg2 = Swig_AllocateString((&address)->data(), (&address)->length()); 
  result = Swig_DirectorClientAPI_OpenVPNClient_callback_tun_builder_add_wins_server_ovpncli_f208ab142d9be705(go_val, swig_arg2);
  c_result = (bool)result; 
  return c_result;
}

extern "C" bool Swig_DirectorClientAPI_OpenVPNClient_callback_tun_builder_set_allow_family_ovpncli_f208ab142d9be705(int, intgo arg2, bool arg3);
bool SwigDirector_ClientAPI_OpenVPNClient::tun_builder_set_allow_family(int af,bool allow) {
  bool c_result = SwigValueInit< bool >() ;
  bool result;
  intgo swig_arg2;
  bool swig_arg3;
  
  swig_arg2 = (int)af; 
  swig_arg3 = (bool)allow; 
  result = Swig_DirectorClientAPI_OpenVPNClient_callback_tun_builder_set_allow_family_ovpncli_f208ab142d9be705(go_val, swig_arg2, swig_arg3);
  c_result = (bool)result; 
  return c_result;
}

extern "C" bool Swig_DirectorClientAPI_OpenVPNClient_callback_tun_builder_set_adapter_domain_suffix_ovpncli_f208ab142d9be705(int, _gostring_ arg2);
bool SwigDirector_ClientAPI_OpenVPNClient::tun_builder_set_adapter_domain_suffix(std::string const &name) {
  bool c_result = SwigValueInit< bool >() ;
  bool result;
  _gostring_ swig_arg2;
  
  swig_arg2 = Swig_AllocateString((&name)->data(), (&name)->length()); 
  result = Swig_DirectorClientAPI_OpenVPNClient_callback_tun_builder_set_adapter_domain_suffix_ovpncli_f208ab142d9be705(go_val, swig_arg2);
  c_result = (bool)result; 
  return c_result;
}

extern "C" intgo Swig_DirectorClientAPI_OpenVPNClient_callback_tun_builder_establish_ovpncli_f208ab142d9be705(int);
int SwigDirector_ClientAPI_OpenVPNClient::tun_builder_establish() {
  int c_result = SwigValueInit< int >() ;
  intgo result;
  
  result = Swig_DirectorClientAPI_OpenVPNClient_callback_tun_builder_establish_ovpncli_f208ab142d9be705(go_val);
  c_result = (int)result; 
  return c_result;
}

extern "C" bool Swig_DirectorClientAPI_OpenVPNClient_callback_tun_builder_persist_ovpncli_f208ab142d9be705(int);
bool SwigDirector_ClientAPI_OpenVPNClient::tun_builder_persist() {
  bool c_result = SwigValueInit< bool >() ;
  bool result;
  
  result = Swig_DirectorClientAPI_OpenVPNClient_callback_tun_builder_persist_ovpncli_f208ab142d9be705(go_val);
  c_result = (bool)result; 
  return c_result;
}

extern "C" std::vector< std::string > *Swig_DirectorClientAPI_OpenVPNClient_callback_tun_builder_get_local_networks_ovpncli_f208ab142d9be705(int, bool arg2);
std::vector< std::string > const SwigDirector_ClientAPI_OpenVPNClient::tun_builder_get_local_networks(bool ipv6) {
  std::vector< std::string > *result;
  bool swig_arg2;
  
  std::vector< std::string > c_result;
  swig_arg2 = (bool)ipv6; 
  result = Swig_DirectorClientAPI_OpenVPNClient_callback_tun_builder_get_local_networks_ovpncli_f208ab142d9be705(go_val, swig_arg2);
  c_result = *(std::vector< std::string > *)result; 
  return c_result;
}

extern "C" void Swig_DirectorClientAPI_OpenVPNClient_callback_tun_builder_establish_lite_ovpncli_f208ab142d9be705(int);
void SwigDirector_ClientAPI_OpenVPNClient::tun_builder_establish_lite() {
  Swig_DirectorClientAPI_OpenVPNClient_callback_tun_builder_establish_lite_ovpncli_f208ab142d9be705(go_val);
}

extern "C" void Swig_DirectorClientAPI_OpenVPNClient_callback_tun_builder_teardown_ovpncli_f208ab142d9be705(int, bool arg2);
void SwigDirector_ClientAPI_OpenVPNClient::tun_builder_teardown(bool disconnect) {
  bool swig_arg2;
  
  swig_arg2 = (bool)disconnect; 
  Swig_DirectorClientAPI_OpenVPNClient_callback_tun_builder_teardown_ovpncli_f208ab142d9be705(go_val, swig_arg2);
}

extern "C" void Swiggo_DeleteDirector_ClientAPI_OpenVPNClient_ovpncli_f208ab142d9be705(intgo);
SwigDirector_ClientAPI_OpenVPNClient::~SwigDirector_ClientAPI_OpenVPNClient()
{
  Swiggo_DeleteDirector_ClientAPI_OpenVPNClient_ovpncli_f208ab142d9be705(go_val);
  delete swig_mem;
}

extern "C" void Swig_DirectorClientAPI_OpenVPNClient_callback_log_ovpncli_f208ab142d9be705(int, openvpn::ClientAPI::LogInfo *arg0);
void SwigDirector_ClientAPI_OpenVPNClient::log(openvpn::ClientAPI::LogInfo const &arg0) {
  openvpn::ClientAPI::LogInfo *swig_arg0;
  
  swig_arg0 = (openvpn::ClientAPI::LogInfo *)&arg0; 
  Swig_DirectorClientAPI_OpenVPNClient_callback_log_ovpncli_f208ab142d9be705(go_val, swig_arg0);
}

extern "C" bool Swig_DirectorClientAPI_OpenVPNClient_callback_socket_protect_ovpncli_f208ab142d9be705(int, intgo arg2, _gostring_ arg3, bool arg4);
bool SwigDirector_ClientAPI_OpenVPNClient::socket_protect(int socket,std::string remote,bool ipv6) {
  bool c_result = SwigValueInit< bool >() ;
  bool result;
  intgo swig_arg2;
  _gostring_ swig_arg3;
  bool swig_arg4;
  
  swig_arg2 = (int)socket; 
  swig_arg3 = Swig_AllocateString((&remote)->data(), (&remote)->length()); 
  swig_arg4 = (bool)ipv6; 
  result = Swig_DirectorClientAPI_OpenVPNClient_callback_socket_protect_ovpncli_f208ab142d9be705(go_val, swig_arg2, swig_arg3, swig_arg4);
  c_result = (bool)result; 
  return c_result;
}

extern "C" bool Swig_DirectorClientAPI_OpenVPNClient_callback_pause_on_connection_timeout_ovpncli_f208ab142d9be705(int);
bool SwigDirector_ClientAPI_OpenVPNClient::pause_on_connection_timeout() {
  bool c_result = SwigValueInit< bool >() ;
  bool result;
  
  result = Swig_DirectorClientAPI_OpenVPNClient_callback_pause_on_connection_timeout_ovpncli_f208ab142d9be705(go_val);
  c_result = (bool)result; 
  return c_result;
}

extern "C" void Swig_DirectorClientAPI_OpenVPNClient_callback_event_ovpncli_f208ab142d9be705(int, openvpn::ClientAPI::Event *arg0);
void SwigDirector_ClientAPI_OpenVPNClient::event(openvpn::ClientAPI::Event const &arg0) {
  openvpn::ClientAPI::Event *swig_arg0;
  
  swig_arg0 = (openvpn::ClientAPI::Event *)&arg0; 
  Swig_DirectorClientAPI_OpenVPNClient_callback_event_ovpncli_f208ab142d9be705(go_val, swig_arg0);
}

extern "C" void Swig_DirectorClientAPI_OpenVPNClient_callback_external_pki_cert_request_ovpncli_f208ab142d9be705(int, openvpn::ClientAPI::ExternalPKICertRequest *arg0);
void SwigDirector_ClientAPI_OpenVPNClient::external_pki_cert_request(openvpn::ClientAPI::ExternalPKICertRequest &arg0) {
  openvpn::ClientAPI::ExternalPKICertRequest *swig_arg0;
  
  swig_arg0 = (openvpn::ClientAPI::ExternalPKICertRequest *)&arg0; 
  Swig_DirectorClientAPI_OpenVPNClient_callback_external_pki_cert_request_ovpncli_f208ab142d9be705(go_val, swig_arg0);
}

extern "C" void Swig_DirectorClientAPI_OpenVPNClient_callback_external_pki_sign_request_ovpncli_f208ab142d9be705(int, openvpn::ClientAPI::ExternalPKISignRequest *arg0);
void SwigDirector_ClientAPI_OpenVPNClient::external_pki_sign_request(openvpn::ClientAPI::ExternalPKISignRequest &arg0) {
  openvpn::ClientAPI::ExternalPKISignRequest *swig_arg0;
  
  swig_arg0 = (openvpn::ClientAPI::ExternalPKISignRequest *)&arg0; 
  Swig_DirectorClientAPI_OpenVPNClient_callback_external_pki_sign_request_ovpncli_f208ab142d9be705(go_val, swig_arg0);
}

extern "C" bool Swig_DirectorClientAPI_OpenVPNClient_callback_remote_override_enabled_ovpncli_f208ab142d9be705(int);
bool SwigDirector_ClientAPI_OpenVPNClient::remote_override_enabled() {
  bool c_result = SwigValueInit< bool >() ;
  bool result;
  
  result = Swig_DirectorClientAPI_OpenVPNClient_callback_remote_override_enabled_ovpncli_f208ab142d9be705(go_val);
  c_result = (bool)result; 
  return c_result;
}

extern "C" void Swig_DirectorClientAPI_OpenVPNClient_callback_remote_override_ovpncli_f208ab142d9be705(int, openvpn::ClientAPI::RemoteOverride *arg2);
void SwigDirector_ClientAPI_OpenVPNClient::remote_override(openvpn::ClientAPI::RemoteOverride &arg0) {
  openvpn::ClientAPI::RemoteOverride *swig_arg2;
  
  swig_arg2 = (openvpn::ClientAPI::RemoteOverride *)&arg0; 
  Swig_DirectorClientAPI_OpenVPNClient_callback_remote_override_ovpncli_f208ab142d9be705(go_val, swig_arg2);
}

extern "C" void Swig_DirectorClientAPI_OpenVPNClient_callback_clock_tick_ovpncli_f208ab142d9be705(int);
void SwigDirector_ClientAPI_OpenVPNClient::clock_tick() {
  Swig_DirectorClientAPI_OpenVPNClient_callback_clock_tick_ovpncli_f208ab142d9be705(go_val);
}

extern "C" void Swig_DirectorClientAPI_OpenVPNClient_callback_connect_attach_ovpncli_f208ab142d9be705(int);
void SwigDirector_ClientAPI_OpenVPNClient::connect_attach() {
  Swig_DirectorClientAPI_OpenVPNClient_callback_connect_attach_ovpncli_f208ab142d9be705(go_val);
}

extern "C" void Swig_DirectorClientAPI_OpenVPNClient_callback_connect_pre_run_ovpncli_f208ab142d9be705(int);
void SwigDirector_ClientAPI_OpenVPNClient::connect_pre_run() {
  Swig_DirectorClientAPI_OpenVPNClient_callback_connect_pre_run_ovpncli_f208ab142d9be705(go_val);
}

extern "C" void Swig_DirectorClientAPI_OpenVPNClient_callback_connect_run_ovpncli_f208ab142d9be705(int);
void SwigDirector_ClientAPI_OpenVPNClient::connect_run() {
  Swig_DirectorClientAPI_OpenVPNClient_callback_connect_run_ovpncli_f208ab142d9be705(go_val);
}

extern "C" void Swig_DirectorClientAPI_OpenVPNClient_callback_connect_session_stop_ovpncli_f208ab142d9be705(int);
void SwigDirector_ClientAPI_OpenVPNClient::connect_session_stop() {
  Swig_DirectorClientAPI_OpenVPNClient_callback_connect_session_stop_ovpncli_f208ab142d9be705(go_val);
}

extern "C" openvpn::Stop *Swig_DirectorClientAPI_OpenVPNClient_callback_get_async_stop_ovpncli_f208ab142d9be705(int);
openvpn::Stop *SwigDirector_ClientAPI_OpenVPNClient::get_async_stop() {
  openvpn::Stop *c_result = 0 ;
  openvpn::Stop *result;
  
  result = Swig_DirectorClientAPI_OpenVPNClient_callback_get_async_stop_ovpncli_f208ab142d9be705(go_val);
  c_result = *(openvpn::Stop **)&result; 
  return c_result;
}

#ifdef __cplusplus
extern "C" {
#endif

void _wrap_Swig_free_ovpncli_f208ab142d9be705(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;
  
  arg1 = *(void **)&_swig_go_0; 
  
  Swig_free(arg1);
  
}


void *_wrap_Swig_malloc_ovpncli_f208ab142d9be705(intgo _swig_go_0) {
  int arg1 ;
  void *result = 0 ;
  void *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (void *)Swig_malloc(arg1);
  *(void **)&_swig_go_result = (void *)result; 
  return _swig_go_result;
}


std::vector< openvpn::ClientAPI::ServerEntry > *_wrap_new_ClientAPI_ServerEntryVector__SWIG_0_ovpncli_f208ab142d9be705() {
  std::vector< openvpn::ClientAPI::ServerEntry > *result = 0 ;
  std::vector< openvpn::ClientAPI::ServerEntry > *_swig_go_result;
  
  
  result = (std::vector< openvpn::ClientAPI::ServerEntry > *)new std::vector< openvpn::ClientAPI::ServerEntry >();
  *(std::vector< openvpn::ClientAPI::ServerEntry > **)&_swig_go_result = (std::vector< openvpn::ClientAPI::ServerEntry > *)result; 
  return _swig_go_result;
}


std::vector< openvpn::ClientAPI::ServerEntry > *_wrap_new_ClientAPI_ServerEntryVector__SWIG_1_ovpncli_f208ab142d9be705(long long _swig_go_0) {
  std::vector< openvpn::ClientAPI::ServerEntry >::size_type arg1 ;
  std::vector< openvpn::ClientAPI::ServerEntry > *result = 0 ;
  std::vector< openvpn::ClientAPI::ServerEntry > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< openvpn::ClientAPI::ServerEntry > *)new std::vector< openvpn::ClientAPI::ServerEntry >(arg1);
  *(std::vector< openvpn::ClientAPI::ServerEntry > **)&_swig_go_result = (std::vector< openvpn::ClientAPI::ServerEntry > *)result; 
  return _swig_go_result;
}


std::vector< openvpn::ClientAPI::ServerEntry > *_wrap_new_ClientAPI_ServerEntryVector__SWIG_2_ovpncli_f208ab142d9be705(std::vector< openvpn::ClientAPI::ServerEntry > *_swig_go_0) {
  std::vector< openvpn::ClientAPI::ServerEntry > *arg1 = 0 ;
  std::vector< openvpn::ClientAPI::ServerEntry > *result = 0 ;
  std::vector< openvpn::ClientAPI::ServerEntry > *_swig_go_result;
  
  arg1 = *(std::vector< openvpn::ClientAPI::ServerEntry > **)&_swig_go_0; 
  
  result = (std::vector< openvpn::ClientAPI::ServerEntry > *)new std::vector< openvpn::ClientAPI::ServerEntry >((std::vector< openvpn::ClientAPI::ServerEntry > const &)*arg1);
  *(std::vector< openvpn::ClientAPI::ServerEntry > **)&_swig_go_result = (std::vector< openvpn::ClientAPI::ServerEntry > *)result; 
  return _swig_go_result;
}


long long _wrap_ClientAPI_ServerEntryVector_size_ovpncli_f208ab142d9be705(std::vector< openvpn::ClientAPI::ServerEntry > *_swig_go_0) {
  std::vector< openvpn::ClientAPI::ServerEntry > *arg1 = (std::vector< openvpn::ClientAPI::ServerEntry > *) 0 ;
  std::vector< openvpn::ClientAPI::ServerEntry >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< openvpn::ClientAPI::ServerEntry > **)&_swig_go_0; 
  
  result = ((std::vector< openvpn::ClientAPI::ServerEntry > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_ClientAPI_ServerEntryVector_capacity_ovpncli_f208ab142d9be705(std::vector< openvpn::ClientAPI::ServerEntry > *_swig_go_0) {
  std::vector< openvpn::ClientAPI::ServerEntry > *arg1 = (std::vector< openvpn::ClientAPI::ServerEntry > *) 0 ;
  std::vector< openvpn::ClientAPI::ServerEntry >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< openvpn::ClientAPI::ServerEntry > **)&_swig_go_0; 
  
  result = ((std::vector< openvpn::ClientAPI::ServerEntry > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_ServerEntryVector_reserve_ovpncli_f208ab142d9be705(std::vector< openvpn::ClientAPI::ServerEntry > *_swig_go_0, long long _swig_go_1) {
  std::vector< openvpn::ClientAPI::ServerEntry > *arg1 = (std::vector< openvpn::ClientAPI::ServerEntry > *) 0 ;
  std::vector< openvpn::ClientAPI::ServerEntry >::size_type arg2 ;
  
  arg1 = *(std::vector< openvpn::ClientAPI::ServerEntry > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_ClientAPI_ServerEntryVector_isEmpty_ovpncli_f208ab142d9be705(std::vector< openvpn::ClientAPI::ServerEntry > *_swig_go_0) {
  std::vector< openvpn::ClientAPI::ServerEntry > *arg1 = (std::vector< openvpn::ClientAPI::ServerEntry > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< openvpn::ClientAPI::ServerEntry > **)&_swig_go_0; 
  
  result = (bool)((std::vector< openvpn::ClientAPI::ServerEntry > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_ServerEntryVector_clear_ovpncli_f208ab142d9be705(std::vector< openvpn::ClientAPI::ServerEntry > *_swig_go_0) {
  std::vector< openvpn::ClientAPI::ServerEntry > *arg1 = (std::vector< openvpn::ClientAPI::ServerEntry > *) 0 ;
  
  arg1 = *(std::vector< openvpn::ClientAPI::ServerEntry > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_ClientAPI_ServerEntryVector_add_ovpncli_f208ab142d9be705(std::vector< openvpn::ClientAPI::ServerEntry > *_swig_go_0, openvpn::ClientAPI::ServerEntry *_swig_go_1) {
  std::vector< openvpn::ClientAPI::ServerEntry > *arg1 = (std::vector< openvpn::ClientAPI::ServerEntry > *) 0 ;
  std::vector< openvpn::ClientAPI::ServerEntry >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< openvpn::ClientAPI::ServerEntry > **)&_swig_go_0; 
  arg2 = *(std::vector< openvpn::ClientAPI::ServerEntry >::value_type **)&_swig_go_1; 
  
  (arg1)->push_back((std::vector< openvpn::ClientAPI::ServerEntry >::value_type const &)*arg2);
  
}


openvpn::ClientAPI::ServerEntry *_wrap_ClientAPI_ServerEntryVector_get_ovpncli_f208ab142d9be705(std::vector< openvpn::ClientAPI::ServerEntry > *_swig_go_0, intgo _swig_go_1) {
  std::vector< openvpn::ClientAPI::ServerEntry > *arg1 = (std::vector< openvpn::ClientAPI::ServerEntry > *) 0 ;
  int arg2 ;
  std::vector< openvpn::ClientAPI::ServerEntry >::value_type *result = 0 ;
  openvpn::ClientAPI::ServerEntry *_swig_go_result;
  
  arg1 = *(std::vector< openvpn::ClientAPI::ServerEntry > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< openvpn::ClientAPI::ServerEntry >::value_type *) &std_vector_Sl_openvpn_ClientAPI_ServerEntry_Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  *(std::vector< openvpn::ClientAPI::ServerEntry >::value_type **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_ServerEntryVector_set_ovpncli_f208ab142d9be705(std::vector< openvpn::ClientAPI::ServerEntry > *_swig_go_0, intgo _swig_go_1, openvpn::ClientAPI::ServerEntry *_swig_go_2) {
  std::vector< openvpn::ClientAPI::ServerEntry > *arg1 = (std::vector< openvpn::ClientAPI::ServerEntry > *) 0 ;
  int arg2 ;
  std::vector< openvpn::ClientAPI::ServerEntry >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< openvpn::ClientAPI::ServerEntry > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(std::vector< openvpn::ClientAPI::ServerEntry >::value_type **)&_swig_go_2; 
  
  try {
    std_vector_Sl_openvpn_ClientAPI_ServerEntry_Sg__set(arg1,arg2,(openvpn::ClientAPI::ServerEntry const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_ClientAPI_ServerEntryVector_ovpncli_f208ab142d9be705(std::vector< openvpn::ClientAPI::ServerEntry > *_swig_go_0) {
  std::vector< openvpn::ClientAPI::ServerEntry > *arg1 = (std::vector< openvpn::ClientAPI::ServerEntry > *) 0 ;
  
  arg1 = *(std::vector< openvpn::ClientAPI::ServerEntry > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< long long > *_wrap_new_ClientAPI_LLVector__SWIG_0_ovpncli_f208ab142d9be705() {
  std::vector< long long > *result = 0 ;
  std::vector< long long > *_swig_go_result;
  
  
  result = (std::vector< long long > *)new std::vector< long long >();
  *(std::vector< long long > **)&_swig_go_result = (std::vector< long long > *)result; 
  return _swig_go_result;
}


std::vector< long long > *_wrap_new_ClientAPI_LLVector__SWIG_1_ovpncli_f208ab142d9be705(long long _swig_go_0) {
  std::vector< long long >::size_type arg1 ;
  std::vector< long long > *result = 0 ;
  std::vector< long long > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< long long > *)new std::vector< long long >(arg1);
  *(std::vector< long long > **)&_swig_go_result = (std::vector< long long > *)result; 
  return _swig_go_result;
}


std::vector< long long > *_wrap_new_ClientAPI_LLVector__SWIG_2_ovpncli_f208ab142d9be705(std::vector< long long > *_swig_go_0) {
  std::vector< long long > *arg1 = 0 ;
  std::vector< long long > *result = 0 ;
  std::vector< long long > *_swig_go_result;
  
  arg1 = *(std::vector< long long > **)&_swig_go_0; 
  
  result = (std::vector< long long > *)new std::vector< long long >((std::vector< long long > const &)*arg1);
  *(std::vector< long long > **)&_swig_go_result = (std::vector< long long > *)result; 
  return _swig_go_result;
}


long long _wrap_ClientAPI_LLVector_size_ovpncli_f208ab142d9be705(std::vector< long long > *_swig_go_0) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< long long > **)&_swig_go_0; 
  
  result = ((std::vector< long long > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_ClientAPI_LLVector_capacity_ovpncli_f208ab142d9be705(std::vector< long long > *_swig_go_0) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< long long > **)&_swig_go_0; 
  
  result = ((std::vector< long long > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_LLVector_reserve_ovpncli_f208ab142d9be705(std::vector< long long > *_swig_go_0, long long _swig_go_1) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::size_type arg2 ;
  
  arg1 = *(std::vector< long long > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_ClientAPI_LLVector_isEmpty_ovpncli_f208ab142d9be705(std::vector< long long > *_swig_go_0) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< long long > **)&_swig_go_0; 
  
  result = (bool)((std::vector< long long > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_LLVector_clear_ovpncli_f208ab142d9be705(std::vector< long long > *_swig_go_0) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  
  arg1 = *(std::vector< long long > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_ClientAPI_LLVector_add_ovpncli_f208ab142d9be705(std::vector< long long > *_swig_go_0, long long _swig_go_1) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< long long > **)&_swig_go_0; 
  arg2 = (std::vector< long long >::value_type *)&_swig_go_1; 
  
  (arg1)->push_back((std::vector< long long >::value_type const &)*arg2);
  
}


long long _wrap_ClientAPI_LLVector_get_ovpncli_f208ab142d9be705(std::vector< long long > *_swig_go_0, intgo _swig_go_1) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  int arg2 ;
  std::vector< long long >::value_type *result = 0 ;
  long long _swig_go_result;
  
  arg1 = *(std::vector< long long > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< long long >::value_type *) &std_vector_Sl_long_SS_long_Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  _swig_go_result = (long long)*result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_LLVector_set_ovpncli_f208ab142d9be705(std::vector< long long > *_swig_go_0, intgo _swig_go_1, long long _swig_go_2) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  int arg2 ;
  std::vector< long long >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< long long > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (std::vector< long long >::value_type *)&_swig_go_2; 
  
  try {
    std_vector_Sl_long_SS_long_Sg__set(arg1,arg2,(long long const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_ClientAPI_LLVector_ovpncli_f208ab142d9be705(std::vector< long long > *_swig_go_0) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  
  arg1 = *(std::vector< long long > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< std::string > *_wrap_new_ClientAPI_StringVec__SWIG_0_ovpncli_f208ab142d9be705() {
  std::vector< std::string > *result = 0 ;
  std::vector< std::string > *_swig_go_result;
  
  
  result = (std::vector< std::string > *)new std::vector< std::string >();
  *(std::vector< std::string > **)&_swig_go_result = (std::vector< std::string > *)result; 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_new_ClientAPI_StringVec__SWIG_1_ovpncli_f208ab142d9be705(long long _swig_go_0) {
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string > *result = 0 ;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  *(std::vector< std::string > **)&_swig_go_result = (std::vector< std::string > *)result; 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_new_ClientAPI_StringVec__SWIG_2_ovpncli_f208ab142d9be705(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  *(std::vector< std::string > **)&_swig_go_result = (std::vector< std::string > *)result; 
  return _swig_go_result;
}


long long _wrap_ClientAPI_StringVec_size_ovpncli_f208ab142d9be705(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  result = ((std::vector< std::string > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_ClientAPI_StringVec_capacity_ovpncli_f208ab142d9be705(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  result = ((std::vector< std::string > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_StringVec_reserve_ovpncli_f208ab142d9be705(std::vector< std::string > *_swig_go_0, long long _swig_go_1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_ClientAPI_StringVec_isEmpty_ovpncli_f208ab142d9be705(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_StringVec_clear_ovpncli_f208ab142d9be705(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_ClientAPI_StringVec_add_ovpncli_f208ab142d9be705(std::vector< std::string > *_swig_go_0, _gostring_ _swig_go_1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  std::vector< std::string >::value_type arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
  
}


_gostring_ _wrap_ClientAPI_StringVec_get_ovpncli_f208ab142d9be705(std::vector< std::string > *_swig_go_0, intgo _swig_go_1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_StringVec_set_ovpncli_f208ab142d9be705(std::vector< std::string > *_swig_go_0, intgo _swig_go_1, _gostring_ _swig_go_2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  std::vector< std::string >::value_type arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  try {
    std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
}


void _wrap_delete_ClientAPI_StringVec_ovpncli_f208ab142d9be705(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  delete arg1;
  
}


bool _wrap_ClientAPI_ExternalPKIBase_sign_ovpncli_f208ab142d9be705(openvpn::ExternalPKIBase *_swig_go_0, _gostring_ _swig_go_1, _gostring_* _swig_go_2, _gostring_ _swig_go_3, _gostring_ _swig_go_4, _gostring_ _swig_go_5) {
  openvpn::ExternalPKIBase *arg1 = (openvpn::ExternalPKIBase *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ExternalPKIBase **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(std::string **)&_swig_go_2; 
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(_swig_go_4.p, _swig_go_4.n);
  arg5 = &arg5_str;
  
  
  std::string arg6_str(_swig_go_5.p, _swig_go_5.n);
  arg6 = &arg6_str;
  
  
  result = (bool)(arg1)->sign((std::string const &)*arg2,*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_ClientAPI_ExternalPKIBase_ovpncli_f208ab142d9be705(openvpn::ExternalPKIBase *_swig_go_0) {
  openvpn::ExternalPKIBase *arg1 = (openvpn::ExternalPKIBase *) 0 ;
  
  arg1 = *(openvpn::ExternalPKIBase **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_delete_ExternalPKIImpl_ovpncli_f208ab142d9be705(openvpn::ExternalPKIImpl *_swig_go_0) {
  openvpn::ExternalPKIImpl *arg1 = (openvpn::ExternalPKIImpl *) 0 ;
  
  arg1 = *(openvpn::ExternalPKIImpl **)&_swig_go_0; 
  
  delete arg1;
  
}


openvpn::ExternalPKIImpl *_wrap_new_ExternalPKIImpl_ovpncli_f208ab142d9be705() {
  openvpn::ExternalPKIImpl *result = 0 ;
  openvpn::ExternalPKIImpl *_swig_go_result;
  
  
  result = (openvpn::ExternalPKIImpl *)new openvpn::ExternalPKIImpl();
  *(openvpn::ExternalPKIImpl **)&_swig_go_result = (openvpn::ExternalPKIImpl *)result; 
  return _swig_go_result;
}


bool _wrap_ClientAPI_TunBuilderBase_tun_builder_new_ovpncli_f208ab142d9be705(openvpn::TunBuilderBase *_swig_go_0) {
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::TunBuilderBase **)&_swig_go_0; 
  
  result = (bool)(arg1)->tun_builder_new();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ClientAPI_TunBuilderBase_tun_builder_set_layer_ovpncli_f208ab142d9be705(openvpn::TunBuilderBase *_swig_go_0, intgo _swig_go_1) {
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  int arg2 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::TunBuilderBase **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (bool)(arg1)->tun_builder_set_layer(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ClientAPI_TunBuilderBase_tun_builder_set_remote_address_ovpncli_f208ab142d9be705(openvpn::TunBuilderBase *_swig_go_0, _gostring_ _swig_go_1, bool _swig_go_2) {
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::TunBuilderBase **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (bool)_swig_go_2; 
  
  result = (bool)(arg1)->tun_builder_set_remote_address((std::string const &)*arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ClientAPI_TunBuilderBase_tun_builder_add_address_ovpncli_f208ab142d9be705(openvpn::TunBuilderBase *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, _gostring_ _swig_go_3, bool _swig_go_4, bool _swig_go_5) {
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  bool arg5 ;
  bool arg6 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::TunBuilderBase **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (int)_swig_go_2; 
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  arg5 = (bool)_swig_go_4; 
  arg6 = (bool)_swig_go_5; 
  
  result = (bool)(arg1)->tun_builder_add_address((std::string const &)*arg2,arg3,(std::string const &)*arg4,arg5,arg6);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ClientAPI_TunBuilderBase_tun_builder_set_route_metric_default_ovpncli_f208ab142d9be705(openvpn::TunBuilderBase *_swig_go_0, intgo _swig_go_1) {
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  int arg2 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::TunBuilderBase **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (bool)(arg1)->tun_builder_set_route_metric_default(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ClientAPI_TunBuilderBase_tun_builder_reroute_gw_ovpncli_f208ab142d9be705(openvpn::TunBuilderBase *_swig_go_0, bool _swig_go_1, bool _swig_go_2, intgo _swig_go_3) {
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  bool arg2 ;
  bool arg3 ;
  unsigned int arg4 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::TunBuilderBase **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  arg3 = (bool)_swig_go_2; 
  arg4 = (unsigned int)_swig_go_3; 
  
  result = (bool)(arg1)->tun_builder_reroute_gw(arg2,arg3,arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ClientAPI_TunBuilderBase_tun_builder_add_route_ovpncli_f208ab142d9be705(openvpn::TunBuilderBase *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, bool _swig_go_4) {
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::TunBuilderBase **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (int)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  arg5 = (bool)_swig_go_4; 
  
  result = (bool)(arg1)->tun_builder_add_route((std::string const &)*arg2,arg3,arg4,arg5);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ClientAPI_TunBuilderBase_tun_builder_exclude_route_ovpncli_f208ab142d9be705(openvpn::TunBuilderBase *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, bool _swig_go_4) {
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::TunBuilderBase **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (int)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  arg5 = (bool)_swig_go_4; 
  
  result = (bool)(arg1)->tun_builder_exclude_route((std::string const &)*arg2,arg3,arg4,arg5);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ClientAPI_TunBuilderBase_tun_builder_add_dns_server_ovpncli_f208ab142d9be705(openvpn::TunBuilderBase *_swig_go_0, _gostring_ _swig_go_1, bool _swig_go_2) {
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::TunBuilderBase **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (bool)_swig_go_2; 
  
  result = (bool)(arg1)->tun_builder_add_dns_server((std::string const &)*arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ClientAPI_TunBuilderBase_tun_builder_add_search_domain_ovpncli_f208ab142d9be705(openvpn::TunBuilderBase *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::TunBuilderBase **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  result = (bool)(arg1)->tun_builder_add_search_domain((std::string const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ClientAPI_TunBuilderBase_tun_builder_set_mtu_ovpncli_f208ab142d9be705(openvpn::TunBuilderBase *_swig_go_0, intgo _swig_go_1) {
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  int arg2 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::TunBuilderBase **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (bool)(arg1)->tun_builder_set_mtu(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ClientAPI_TunBuilderBase_tun_builder_set_session_name_ovpncli_f208ab142d9be705(openvpn::TunBuilderBase *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::TunBuilderBase **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  result = (bool)(arg1)->tun_builder_set_session_name((std::string const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ClientAPI_TunBuilderBase_tun_builder_add_proxy_bypass_ovpncli_f208ab142d9be705(openvpn::TunBuilderBase *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::TunBuilderBase **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  result = (bool)(arg1)->tun_builder_add_proxy_bypass((std::string const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ClientAPI_TunBuilderBase_tun_builder_set_proxy_auto_config_url_ovpncli_f208ab142d9be705(openvpn::TunBuilderBase *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::TunBuilderBase **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  result = (bool)(arg1)->tun_builder_set_proxy_auto_config_url((std::string const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ClientAPI_TunBuilderBase_tun_builder_set_proxy_http_ovpncli_f208ab142d9be705(openvpn::TunBuilderBase *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::TunBuilderBase **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (int)_swig_go_2; 
  
  result = (bool)(arg1)->tun_builder_set_proxy_http((std::string const &)*arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ClientAPI_TunBuilderBase_tun_builder_set_proxy_https_ovpncli_f208ab142d9be705(openvpn::TunBuilderBase *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::TunBuilderBase **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (int)_swig_go_2; 
  
  result = (bool)(arg1)->tun_builder_set_proxy_https((std::string const &)*arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ClientAPI_TunBuilderBase_tun_builder_add_wins_server_ovpncli_f208ab142d9be705(openvpn::TunBuilderBase *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::TunBuilderBase **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  result = (bool)(arg1)->tun_builder_add_wins_server((std::string const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ClientAPI_TunBuilderBase_tun_builder_set_allow_family_ovpncli_f208ab142d9be705(openvpn::TunBuilderBase *_swig_go_0, intgo _swig_go_1, bool _swig_go_2) {
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  int arg2 ;
  bool arg3 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::TunBuilderBase **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (bool)_swig_go_2; 
  
  result = (bool)(arg1)->tun_builder_set_allow_family(arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ClientAPI_TunBuilderBase_tun_builder_set_adapter_domain_suffix_ovpncli_f208ab142d9be705(openvpn::TunBuilderBase *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::TunBuilderBase **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  result = (bool)(arg1)->tun_builder_set_adapter_domain_suffix((std::string const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_ClientAPI_TunBuilderBase_tun_builder_establish_ovpncli_f208ab142d9be705(openvpn::TunBuilderBase *_swig_go_0) {
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(openvpn::TunBuilderBase **)&_swig_go_0; 
  
  result = (int)(arg1)->tun_builder_establish();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ClientAPI_TunBuilderBase_tun_builder_persist_ovpncli_f208ab142d9be705(openvpn::TunBuilderBase *_swig_go_0) {
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::TunBuilderBase **)&_swig_go_0; 
  
  result = (bool)(arg1)->tun_builder_persist();
  _swig_go_result = result; 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_ClientAPI_TunBuilderBase_tun_builder_get_local_networks_ovpncli_f208ab142d9be705(openvpn::TunBuilderBase *_swig_go_0, bool _swig_go_1) {
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  bool arg2 ;
  std::vector< std::string > result;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(openvpn::TunBuilderBase **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  result = (arg1)->tun_builder_get_local_networks(arg2);
  *(std::vector< std::string > **)&_swig_go_result = new std::vector< std::string >(result); 
  return _swig_go_result;
}


void _wrap_ClientAPI_TunBuilderBase_tun_builder_establish_lite_ovpncli_f208ab142d9be705(openvpn::TunBuilderBase *_swig_go_0) {
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  
  arg1 = *(openvpn::TunBuilderBase **)&_swig_go_0; 
  
  (arg1)->tun_builder_establish_lite();
  
}


void _wrap_ClientAPI_TunBuilderBase_tun_builder_teardown_ovpncli_f208ab142d9be705(openvpn::TunBuilderBase *_swig_go_0, bool _swig_go_1) {
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  bool arg2 ;
  
  arg1 = *(openvpn::TunBuilderBase **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  (arg1)->tun_builder_teardown(arg2);
  
}


void _wrap_delete_ClientAPI_TunBuilderBase_ovpncli_f208ab142d9be705(openvpn::TunBuilderBase *_swig_go_0) {
  openvpn::TunBuilderBase *arg1 = (openvpn::TunBuilderBase *) 0 ;
  
  arg1 = *(openvpn::TunBuilderBase **)&_swig_go_0; 
  
  delete arg1;
  
}


openvpn::TunBuilderBase *_wrap_new_ClientAPI_TunBuilderBase_ovpncli_f208ab142d9be705() {
  openvpn::TunBuilderBase *result = 0 ;
  openvpn::TunBuilderBase *_swig_go_result;
  
  
  result = (openvpn::TunBuilderBase *)new openvpn::TunBuilderBase();
  *(openvpn::TunBuilderBase **)&_swig_go_result = (openvpn::TunBuilderBase *)result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_ServerEntry_server_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ServerEntry *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::ServerEntry *arg1 = (openvpn::ClientAPI::ServerEntry *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::ServerEntry **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->server = *arg2;
  
}


_gostring_ _wrap_ClientAPI_ServerEntry_server_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ServerEntry *_swig_go_0) {
  openvpn::ClientAPI::ServerEntry *arg1 = (openvpn::ClientAPI::ServerEntry *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::ServerEntry **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->server);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_ServerEntry_friendlyName_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ServerEntry *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::ServerEntry *arg1 = (openvpn::ClientAPI::ServerEntry *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::ServerEntry **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->friendlyName = *arg2;
  
}


_gostring_ _wrap_ClientAPI_ServerEntry_friendlyName_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ServerEntry *_swig_go_0) {
  openvpn::ClientAPI::ServerEntry *arg1 = (openvpn::ClientAPI::ServerEntry *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::ServerEntry **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->friendlyName);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


openvpn::ClientAPI::ServerEntry *_wrap_new_ClientAPI_ServerEntry_ovpncli_f208ab142d9be705() {
  openvpn::ClientAPI::ServerEntry *result = 0 ;
  openvpn::ClientAPI::ServerEntry *_swig_go_result;
  
  
  result = (openvpn::ClientAPI::ServerEntry *)new openvpn::ClientAPI::ServerEntry();
  *(openvpn::ClientAPI::ServerEntry **)&_swig_go_result = (openvpn::ClientAPI::ServerEntry *)result; 
  return _swig_go_result;
}


void _wrap_delete_ClientAPI_ServerEntry_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ServerEntry *_swig_go_0) {
  openvpn::ClientAPI::ServerEntry *arg1 = (openvpn::ClientAPI::ServerEntry *) 0 ;
  
  arg1 = *(openvpn::ClientAPI::ServerEntry **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_ClientAPI_EvalConfig_error_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::EvalConfig *_swig_go_0, bool _swig_go_1) {
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  bool arg2 ;
  
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->error = arg2;
  
}


bool _wrap_ClientAPI_EvalConfig_error_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::EvalConfig *_swig_go_0) {
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&_swig_go_0; 
  
  result = (bool) ((arg1)->error);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_EvalConfig_message_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::EvalConfig *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->message = *arg2;
  
}


_gostring_ _wrap_ClientAPI_EvalConfig_message_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::EvalConfig *_swig_go_0) {
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->message);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_EvalConfig_userlockedUsername_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::EvalConfig *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->userlockedUsername = *arg2;
  
}


_gostring_ _wrap_ClientAPI_EvalConfig_userlockedUsername_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::EvalConfig *_swig_go_0) {
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->userlockedUsername);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_EvalConfig_profileName_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::EvalConfig *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->profileName = *arg2;
  
}


_gostring_ _wrap_ClientAPI_EvalConfig_profileName_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::EvalConfig *_swig_go_0) {
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->profileName);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_EvalConfig_friendlyName_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::EvalConfig *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->friendlyName = *arg2;
  
}


_gostring_ _wrap_ClientAPI_EvalConfig_friendlyName_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::EvalConfig *_swig_go_0) {
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->friendlyName);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_EvalConfig_autologin_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::EvalConfig *_swig_go_0, bool _swig_go_1) {
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  bool arg2 ;
  
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->autologin = arg2;
  
}


bool _wrap_ClientAPI_EvalConfig_autologin_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::EvalConfig *_swig_go_0) {
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&_swig_go_0; 
  
  result = (bool) ((arg1)->autologin);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_EvalConfig_externalPki_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::EvalConfig *_swig_go_0, bool _swig_go_1) {
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  bool arg2 ;
  
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->externalPki = arg2;
  
}


bool _wrap_ClientAPI_EvalConfig_externalPki_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::EvalConfig *_swig_go_0) {
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&_swig_go_0; 
  
  result = (bool) ((arg1)->externalPki);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_EvalConfig_staticChallenge_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::EvalConfig *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->staticChallenge = *arg2;
  
}


_gostring_ _wrap_ClientAPI_EvalConfig_staticChallenge_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::EvalConfig *_swig_go_0) {
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->staticChallenge);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_EvalConfig_staticChallengeEcho_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::EvalConfig *_swig_go_0, bool _swig_go_1) {
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  bool arg2 ;
  
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->staticChallengeEcho = arg2;
  
}


bool _wrap_ClientAPI_EvalConfig_staticChallengeEcho_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::EvalConfig *_swig_go_0) {
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&_swig_go_0; 
  
  result = (bool) ((arg1)->staticChallengeEcho);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_EvalConfig_privateKeyPasswordRequired_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::EvalConfig *_swig_go_0, bool _swig_go_1) {
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  bool arg2 ;
  
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->privateKeyPasswordRequired = arg2;
  
}


bool _wrap_ClientAPI_EvalConfig_privateKeyPasswordRequired_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::EvalConfig *_swig_go_0) {
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&_swig_go_0; 
  
  result = (bool) ((arg1)->privateKeyPasswordRequired);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_EvalConfig_allowPasswordSave_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::EvalConfig *_swig_go_0, bool _swig_go_1) {
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  bool arg2 ;
  
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->allowPasswordSave = arg2;
  
}


bool _wrap_ClientAPI_EvalConfig_allowPasswordSave_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::EvalConfig *_swig_go_0) {
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&_swig_go_0; 
  
  result = (bool) ((arg1)->allowPasswordSave);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_EvalConfig_remoteHost_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::EvalConfig *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->remoteHost = *arg2;
  
}


_gostring_ _wrap_ClientAPI_EvalConfig_remoteHost_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::EvalConfig *_swig_go_0) {
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->remoteHost);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_EvalConfig_remotePort_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::EvalConfig *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->remotePort = *arg2;
  
}


_gostring_ _wrap_ClientAPI_EvalConfig_remotePort_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::EvalConfig *_swig_go_0) {
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->remotePort);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_EvalConfig_remoteProto_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::EvalConfig *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->remoteProto = *arg2;
  
}


_gostring_ _wrap_ClientAPI_EvalConfig_remoteProto_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::EvalConfig *_swig_go_0) {
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->remoteProto);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_EvalConfig_serverList_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::EvalConfig *_swig_go_0, std::vector< openvpn::ClientAPI::ServerEntry > *_swig_go_1) {
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  std::vector< openvpn::ClientAPI::ServerEntry > *arg2 = (std::vector< openvpn::ClientAPI::ServerEntry > *) 0 ;
  
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&_swig_go_0; 
  arg2 = *(std::vector< openvpn::ClientAPI::ServerEntry > **)&_swig_go_1; 
  
  if (arg1) (arg1)->serverList = *arg2;
  
}


std::vector< openvpn::ClientAPI::ServerEntry > *_wrap_ClientAPI_EvalConfig_serverList_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::EvalConfig *_swig_go_0) {
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  std::vector< openvpn::ClientAPI::ServerEntry > *result = 0 ;
  std::vector< openvpn::ClientAPI::ServerEntry > *_swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&_swig_go_0; 
  
  result = (std::vector< openvpn::ClientAPI::ServerEntry > *)& ((arg1)->serverList);
  *(std::vector< openvpn::ClientAPI::ServerEntry > **)&_swig_go_result = (std::vector< openvpn::ClientAPI::ServerEntry > *)result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_EvalConfig_windowsDriver_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::EvalConfig *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->windowsDriver = *arg2;
  
}


_gostring_ _wrap_ClientAPI_EvalConfig_windowsDriver_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::EvalConfig *_swig_go_0) {
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->windowsDriver);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


openvpn::ClientAPI::EvalConfig *_wrap_new_ClientAPI_EvalConfig_ovpncli_f208ab142d9be705() {
  openvpn::ClientAPI::EvalConfig *result = 0 ;
  openvpn::ClientAPI::EvalConfig *_swig_go_result;
  
  
  result = (openvpn::ClientAPI::EvalConfig *)new openvpn::ClientAPI::EvalConfig();
  *(openvpn::ClientAPI::EvalConfig **)&_swig_go_result = (openvpn::ClientAPI::EvalConfig *)result; 
  return _swig_go_result;
}


void _wrap_delete_ClientAPI_EvalConfig_ovpncli_f208ab142d9be705(openvpn::ClientAPI::EvalConfig *_swig_go_0) {
  openvpn::ClientAPI::EvalConfig *arg1 = (openvpn::ClientAPI::EvalConfig *) 0 ;
  
  arg1 = *(openvpn::ClientAPI::EvalConfig **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_ClientAPI_ProvideCreds_username_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ProvideCreds *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::ProvideCreds *arg1 = (openvpn::ClientAPI::ProvideCreds *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::ProvideCreds **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->username = *arg2;
  
}


_gostring_ _wrap_ClientAPI_ProvideCreds_username_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ProvideCreds *_swig_go_0) {
  openvpn::ClientAPI::ProvideCreds *arg1 = (openvpn::ClientAPI::ProvideCreds *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::ProvideCreds **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->username);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_ProvideCreds_password_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ProvideCreds *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::ProvideCreds *arg1 = (openvpn::ClientAPI::ProvideCreds *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::ProvideCreds **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->password = *arg2;
  
}


_gostring_ _wrap_ClientAPI_ProvideCreds_password_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ProvideCreds *_swig_go_0) {
  openvpn::ClientAPI::ProvideCreds *arg1 = (openvpn::ClientAPI::ProvideCreds *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::ProvideCreds **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->password);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_ProvideCreds_http_proxy_user_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ProvideCreds *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::ProvideCreds *arg1 = (openvpn::ClientAPI::ProvideCreds *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::ProvideCreds **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->http_proxy_user = *arg2;
  
}


_gostring_ _wrap_ClientAPI_ProvideCreds_http_proxy_user_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ProvideCreds *_swig_go_0) {
  openvpn::ClientAPI::ProvideCreds *arg1 = (openvpn::ClientAPI::ProvideCreds *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::ProvideCreds **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->http_proxy_user);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_ProvideCreds_http_proxy_pass_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ProvideCreds *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::ProvideCreds *arg1 = (openvpn::ClientAPI::ProvideCreds *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::ProvideCreds **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->http_proxy_pass = *arg2;
  
}


_gostring_ _wrap_ClientAPI_ProvideCreds_http_proxy_pass_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ProvideCreds *_swig_go_0) {
  openvpn::ClientAPI::ProvideCreds *arg1 = (openvpn::ClientAPI::ProvideCreds *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::ProvideCreds **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->http_proxy_pass);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_ProvideCreds_response_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ProvideCreds *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::ProvideCreds *arg1 = (openvpn::ClientAPI::ProvideCreds *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::ProvideCreds **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->response = *arg2;
  
}


_gostring_ _wrap_ClientAPI_ProvideCreds_response_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ProvideCreds *_swig_go_0) {
  openvpn::ClientAPI::ProvideCreds *arg1 = (openvpn::ClientAPI::ProvideCreds *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::ProvideCreds **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->response);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_ProvideCreds_dynamicChallengeCookie_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ProvideCreds *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::ProvideCreds *arg1 = (openvpn::ClientAPI::ProvideCreds *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::ProvideCreds **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->dynamicChallengeCookie = *arg2;
  
}


_gostring_ _wrap_ClientAPI_ProvideCreds_dynamicChallengeCookie_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ProvideCreds *_swig_go_0) {
  openvpn::ClientAPI::ProvideCreds *arg1 = (openvpn::ClientAPI::ProvideCreds *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::ProvideCreds **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->dynamicChallengeCookie);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_ProvideCreds_replacePasswordWithSessionID_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ProvideCreds *_swig_go_0, bool _swig_go_1) {
  openvpn::ClientAPI::ProvideCreds *arg1 = (openvpn::ClientAPI::ProvideCreds *) 0 ;
  bool arg2 ;
  
  arg1 = *(openvpn::ClientAPI::ProvideCreds **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->replacePasswordWithSessionID = arg2;
  
}


bool _wrap_ClientAPI_ProvideCreds_replacePasswordWithSessionID_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ProvideCreds *_swig_go_0) {
  openvpn::ClientAPI::ProvideCreds *arg1 = (openvpn::ClientAPI::ProvideCreds *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::ProvideCreds **)&_swig_go_0; 
  
  result = (bool) ((arg1)->replacePasswordWithSessionID);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_ProvideCreds_cachePassword_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ProvideCreds *_swig_go_0, bool _swig_go_1) {
  openvpn::ClientAPI::ProvideCreds *arg1 = (openvpn::ClientAPI::ProvideCreds *) 0 ;
  bool arg2 ;
  
  arg1 = *(openvpn::ClientAPI::ProvideCreds **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->cachePassword = arg2;
  
}


bool _wrap_ClientAPI_ProvideCreds_cachePassword_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ProvideCreds *_swig_go_0) {
  openvpn::ClientAPI::ProvideCreds *arg1 = (openvpn::ClientAPI::ProvideCreds *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::ProvideCreds **)&_swig_go_0; 
  
  result = (bool) ((arg1)->cachePassword);
  _swig_go_result = result; 
  return _swig_go_result;
}


openvpn::ClientAPI::ProvideCreds *_wrap_new_ClientAPI_ProvideCreds_ovpncli_f208ab142d9be705() {
  openvpn::ClientAPI::ProvideCreds *result = 0 ;
  openvpn::ClientAPI::ProvideCreds *_swig_go_result;
  
  
  result = (openvpn::ClientAPI::ProvideCreds *)new openvpn::ClientAPI::ProvideCreds();
  *(openvpn::ClientAPI::ProvideCreds **)&_swig_go_result = (openvpn::ClientAPI::ProvideCreds *)result; 
  return _swig_go_result;
}


void _wrap_delete_ClientAPI_ProvideCreds_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ProvideCreds *_swig_go_0) {
  openvpn::ClientAPI::ProvideCreds *arg1 = (openvpn::ClientAPI::ProvideCreds *) 0 ;
  
  arg1 = *(openvpn::ClientAPI::ProvideCreds **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_ClientAPI_SessionToken_username_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::SessionToken *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::SessionToken *arg1 = (openvpn::ClientAPI::SessionToken *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::SessionToken **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->username = *arg2;
  
}


_gostring_ _wrap_ClientAPI_SessionToken_username_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::SessionToken *_swig_go_0) {
  openvpn::ClientAPI::SessionToken *arg1 = (openvpn::ClientAPI::SessionToken *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::SessionToken **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->username);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_SessionToken_session_id_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::SessionToken *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::SessionToken *arg1 = (openvpn::ClientAPI::SessionToken *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::SessionToken **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->session_id = *arg2;
  
}


_gostring_ _wrap_ClientAPI_SessionToken_session_id_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::SessionToken *_swig_go_0) {
  openvpn::ClientAPI::SessionToken *arg1 = (openvpn::ClientAPI::SessionToken *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::SessionToken **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->session_id);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


openvpn::ClientAPI::SessionToken *_wrap_new_ClientAPI_SessionToken_ovpncli_f208ab142d9be705() {
  openvpn::ClientAPI::SessionToken *result = 0 ;
  openvpn::ClientAPI::SessionToken *_swig_go_result;
  
  
  result = (openvpn::ClientAPI::SessionToken *)new openvpn::ClientAPI::SessionToken();
  *(openvpn::ClientAPI::SessionToken **)&_swig_go_result = (openvpn::ClientAPI::SessionToken *)result; 
  return _swig_go_result;
}


void _wrap_delete_ClientAPI_SessionToken_ovpncli_f208ab142d9be705(openvpn::ClientAPI::SessionToken *_swig_go_0) {
  openvpn::ClientAPI::SessionToken *arg1 = (openvpn::ClientAPI::SessionToken *) 0 ;
  
  arg1 = *(openvpn::ClientAPI::SessionToken **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_ClientAPI_DynamicChallenge_challenge_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::DynamicChallenge *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::DynamicChallenge *arg1 = (openvpn::ClientAPI::DynamicChallenge *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::DynamicChallenge **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->challenge = *arg2;
  
}


_gostring_ _wrap_ClientAPI_DynamicChallenge_challenge_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::DynamicChallenge *_swig_go_0) {
  openvpn::ClientAPI::DynamicChallenge *arg1 = (openvpn::ClientAPI::DynamicChallenge *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::DynamicChallenge **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->challenge);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_DynamicChallenge_echo_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::DynamicChallenge *_swig_go_0, bool _swig_go_1) {
  openvpn::ClientAPI::DynamicChallenge *arg1 = (openvpn::ClientAPI::DynamicChallenge *) 0 ;
  bool arg2 ;
  
  arg1 = *(openvpn::ClientAPI::DynamicChallenge **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->echo = arg2;
  
}


bool _wrap_ClientAPI_DynamicChallenge_echo_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::DynamicChallenge *_swig_go_0) {
  openvpn::ClientAPI::DynamicChallenge *arg1 = (openvpn::ClientAPI::DynamicChallenge *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::DynamicChallenge **)&_swig_go_0; 
  
  result = (bool) ((arg1)->echo);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_DynamicChallenge_responseRequired_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::DynamicChallenge *_swig_go_0, bool _swig_go_1) {
  openvpn::ClientAPI::DynamicChallenge *arg1 = (openvpn::ClientAPI::DynamicChallenge *) 0 ;
  bool arg2 ;
  
  arg1 = *(openvpn::ClientAPI::DynamicChallenge **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->responseRequired = arg2;
  
}


bool _wrap_ClientAPI_DynamicChallenge_responseRequired_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::DynamicChallenge *_swig_go_0) {
  openvpn::ClientAPI::DynamicChallenge *arg1 = (openvpn::ClientAPI::DynamicChallenge *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::DynamicChallenge **)&_swig_go_0; 
  
  result = (bool) ((arg1)->responseRequired);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_DynamicChallenge_stateID_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::DynamicChallenge *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::DynamicChallenge *arg1 = (openvpn::ClientAPI::DynamicChallenge *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::DynamicChallenge **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->stateID = *arg2;
  
}


_gostring_ _wrap_ClientAPI_DynamicChallenge_stateID_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::DynamicChallenge *_swig_go_0) {
  openvpn::ClientAPI::DynamicChallenge *arg1 = (openvpn::ClientAPI::DynamicChallenge *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::DynamicChallenge **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->stateID);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


openvpn::ClientAPI::DynamicChallenge *_wrap_new_ClientAPI_DynamicChallenge_ovpncli_f208ab142d9be705() {
  openvpn::ClientAPI::DynamicChallenge *result = 0 ;
  openvpn::ClientAPI::DynamicChallenge *_swig_go_result;
  
  
  result = (openvpn::ClientAPI::DynamicChallenge *)new openvpn::ClientAPI::DynamicChallenge();
  *(openvpn::ClientAPI::DynamicChallenge **)&_swig_go_result = (openvpn::ClientAPI::DynamicChallenge *)result; 
  return _swig_go_result;
}


void _wrap_delete_ClientAPI_DynamicChallenge_ovpncli_f208ab142d9be705(openvpn::ClientAPI::DynamicChallenge *_swig_go_0) {
  openvpn::ClientAPI::DynamicChallenge *arg1 = (openvpn::ClientAPI::DynamicChallenge *) 0 ;
  
  arg1 = *(openvpn::ClientAPI::DynamicChallenge **)&_swig_go_0; 
  
  delete arg1;
  
}


openvpn::ClientAPI::KeyValue *_wrap_new_ClientAPI_KeyValue__SWIG_0_ovpncli_f208ab142d9be705() {
  openvpn::ClientAPI::KeyValue *result = 0 ;
  openvpn::ClientAPI::KeyValue *_swig_go_result;
  
  
  result = (openvpn::ClientAPI::KeyValue *)new openvpn::ClientAPI::KeyValue();
  *(openvpn::ClientAPI::KeyValue **)&_swig_go_result = (openvpn::ClientAPI::KeyValue *)result; 
  return _swig_go_result;
}


openvpn::ClientAPI::KeyValue *_wrap_new_ClientAPI_KeyValue__SWIG_1_ovpncli_f208ab142d9be705(_gostring_ _swig_go_0, _gostring_ _swig_go_1) {
  std::string arg1 ;
  std::string arg2 ;
  openvpn::ClientAPI::KeyValue *result = 0 ;
  openvpn::ClientAPI::KeyValue *_swig_go_result;
  
  (&arg1)->assign(_swig_go_0.p, _swig_go_0.n); 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  
  result = (openvpn::ClientAPI::KeyValue *)new openvpn::ClientAPI::KeyValue(arg1,arg2);
  *(openvpn::ClientAPI::KeyValue **)&_swig_go_result = (openvpn::ClientAPI::KeyValue *)result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_KeyValue_key_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::KeyValue *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::KeyValue *arg1 = (openvpn::ClientAPI::KeyValue *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::KeyValue **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->key = *arg2;
  
}


_gostring_ _wrap_ClientAPI_KeyValue_key_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::KeyValue *_swig_go_0) {
  openvpn::ClientAPI::KeyValue *arg1 = (openvpn::ClientAPI::KeyValue *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::KeyValue **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->key);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_KeyValue_value_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::KeyValue *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::KeyValue *arg1 = (openvpn::ClientAPI::KeyValue *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::KeyValue **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->value = *arg2;
  
}


_gostring_ _wrap_ClientAPI_KeyValue_value_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::KeyValue *_swig_go_0) {
  openvpn::ClientAPI::KeyValue *arg1 = (openvpn::ClientAPI::KeyValue *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::KeyValue **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->value);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_delete_ClientAPI_KeyValue_ovpncli_f208ab142d9be705(openvpn::ClientAPI::KeyValue *_swig_go_0) {
  openvpn::ClientAPI::KeyValue *arg1 = (openvpn::ClientAPI::KeyValue *) 0 ;
  
  arg1 = *(openvpn::ClientAPI::KeyValue **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_ClientAPI_Config_content_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->content = *arg2;
  
}


_gostring_ _wrap_ClientAPI_Config_content_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->content);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_Config_contentList_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0, std::vector< openvpn::ClientAPI::KeyValue > *_swig_go_1) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::vector< openvpn::ClientAPI::KeyValue > *arg2 = (std::vector< openvpn::ClientAPI::KeyValue > *) 0 ;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  arg2 = *(std::vector< openvpn::ClientAPI::KeyValue > **)&_swig_go_1; 
  
  if (arg1) (arg1)->contentList = *arg2;
  
}


std::vector< openvpn::ClientAPI::KeyValue > *_wrap_ClientAPI_Config_contentList_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::vector< openvpn::ClientAPI::KeyValue > *result = 0 ;
  std::vector< openvpn::ClientAPI::KeyValue > *_swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  result = (std::vector< openvpn::ClientAPI::KeyValue > *)& ((arg1)->contentList);
  *(std::vector< openvpn::ClientAPI::KeyValue > **)&_swig_go_result = (std::vector< openvpn::ClientAPI::KeyValue > *)result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_Config_guiVersion_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->guiVersion = *arg2;
  
}


_gostring_ _wrap_ClientAPI_Config_guiVersion_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->guiVersion);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_Config_ssoMethods_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->ssoMethods = *arg2;
  
}


_gostring_ _wrap_ClientAPI_Config_ssoMethods_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->ssoMethods);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_Config_hwAddrOverride_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->hwAddrOverride = *arg2;
  
}


_gostring_ _wrap_ClientAPI_Config_hwAddrOverride_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->hwAddrOverride);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_Config_platformVersion_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->platformVersion = *arg2;
  
}


_gostring_ _wrap_ClientAPI_Config_platformVersion_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->platformVersion);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_Config_serverOverride_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->serverOverride = *arg2;
  
}


_gostring_ _wrap_ClientAPI_Config_serverOverride_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->serverOverride);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_Config_portOverride_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->portOverride = *arg2;
  
}


_gostring_ _wrap_ClientAPI_Config_portOverride_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->portOverride);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_Config_protoOverride_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->protoOverride = *arg2;
  
}


_gostring_ _wrap_ClientAPI_Config_protoOverride_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->protoOverride);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_Config_protoVersionOverride_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0, intgo _swig_go_1) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  int arg2 ;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->protoVersionOverride = arg2;
  
}


intgo _wrap_ClientAPI_Config_protoVersionOverride_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  result = (int) ((arg1)->protoVersionOverride);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_Config_allowUnusedAddrFamilies_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->allowUnusedAddrFamilies = *arg2;
  
}


_gostring_ _wrap_ClientAPI_Config_allowUnusedAddrFamilies_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->allowUnusedAddrFamilies);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_Config_connTimeout_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0, intgo _swig_go_1) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  int arg2 ;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->connTimeout = arg2;
  
}


intgo _wrap_ClientAPI_Config_connTimeout_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  result = (int) ((arg1)->connTimeout);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_Config_tunPersist_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0, bool _swig_go_1) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool arg2 ;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->tunPersist = arg2;
  
}


bool _wrap_ClientAPI_Config_tunPersist_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  result = (bool) ((arg1)->tunPersist);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_Config_googleDnsFallback_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0, bool _swig_go_1) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool arg2 ;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->googleDnsFallback = arg2;
  
}


bool _wrap_ClientAPI_Config_googleDnsFallback_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  result = (bool) ((arg1)->googleDnsFallback);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_Config_synchronousDnsLookup_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0, bool _swig_go_1) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool arg2 ;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->synchronousDnsLookup = arg2;
  
}


bool _wrap_ClientAPI_Config_synchronousDnsLookup_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  result = (bool) ((arg1)->synchronousDnsLookup);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_Config_autologinSessions_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0, bool _swig_go_1) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool arg2 ;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->autologinSessions = arg2;
  
}


bool _wrap_ClientAPI_Config_autologinSessions_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  result = (bool) ((arg1)->autologinSessions);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_Config_retryOnAuthFailed_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0, bool _swig_go_1) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool arg2 ;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->retryOnAuthFailed = arg2;
  
}


bool _wrap_ClientAPI_Config_retryOnAuthFailed_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  result = (bool) ((arg1)->retryOnAuthFailed);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_Config_externalPkiAlias_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->externalPkiAlias = *arg2;
  
}


_gostring_ _wrap_ClientAPI_Config_externalPkiAlias_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->externalPkiAlias);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_Config_disableClientCert_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0, bool _swig_go_1) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool arg2 ;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->disableClientCert = arg2;
  
}


bool _wrap_ClientAPI_Config_disableClientCert_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  result = (bool) ((arg1)->disableClientCert);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_Config_sslDebugLevel_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0, intgo _swig_go_1) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  int arg2 ;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->sslDebugLevel = arg2;
  
}


intgo _wrap_ClientAPI_Config_sslDebugLevel_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  result = (int) ((arg1)->sslDebugLevel);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_Config_compressionMode_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->compressionMode = *arg2;
  
}


_gostring_ _wrap_ClientAPI_Config_compressionMode_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->compressionMode);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_Config_privateKeyPassword_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->privateKeyPassword = *arg2;
  
}


_gostring_ _wrap_ClientAPI_Config_privateKeyPassword_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->privateKeyPassword);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_Config_defaultKeyDirection_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0, intgo _swig_go_1) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  int arg2 ;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->defaultKeyDirection = arg2;
  
}


intgo _wrap_ClientAPI_Config_defaultKeyDirection_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  result = (int) ((arg1)->defaultKeyDirection);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_Config_tlsVersionMinOverride_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->tlsVersionMinOverride = *arg2;
  
}


_gostring_ _wrap_ClientAPI_Config_tlsVersionMinOverride_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->tlsVersionMinOverride);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_Config_tlsCertProfileOverride_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->tlsCertProfileOverride = *arg2;
  
}


_gostring_ _wrap_ClientAPI_Config_tlsCertProfileOverride_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->tlsCertProfileOverride);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_Config_tlsCipherList_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->tlsCipherList = *arg2;
  
}


_gostring_ _wrap_ClientAPI_Config_tlsCipherList_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->tlsCipherList);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_Config_tlsCiphersuitesList_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->tlsCiphersuitesList = *arg2;
  
}


_gostring_ _wrap_ClientAPI_Config_tlsCiphersuitesList_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->tlsCiphersuitesList);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_Config_peerInfo_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0, std::vector< openvpn::ClientAPI::KeyValue > *_swig_go_1) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::vector< openvpn::ClientAPI::KeyValue > *arg2 = (std::vector< openvpn::ClientAPI::KeyValue > *) 0 ;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  arg2 = *(std::vector< openvpn::ClientAPI::KeyValue > **)&_swig_go_1; 
  
  if (arg1) (arg1)->peerInfo = *arg2;
  
}


std::vector< openvpn::ClientAPI::KeyValue > *_wrap_ClientAPI_Config_peerInfo_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::vector< openvpn::ClientAPI::KeyValue > *result = 0 ;
  std::vector< openvpn::ClientAPI::KeyValue > *_swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  result = (std::vector< openvpn::ClientAPI::KeyValue > *)& ((arg1)->peerInfo);
  *(std::vector< openvpn::ClientAPI::KeyValue > **)&_swig_go_result = (std::vector< openvpn::ClientAPI::KeyValue > *)result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_Config_proxyHost_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->proxyHost = *arg2;
  
}


_gostring_ _wrap_ClientAPI_Config_proxyHost_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->proxyHost);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_Config_proxyPort_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->proxyPort = *arg2;
  
}


_gostring_ _wrap_ClientAPI_Config_proxyPort_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->proxyPort);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_Config_proxyUsername_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->proxyUsername = *arg2;
  
}


_gostring_ _wrap_ClientAPI_Config_proxyUsername_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->proxyUsername);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_Config_proxyPassword_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->proxyPassword = *arg2;
  
}


_gostring_ _wrap_ClientAPI_Config_proxyPassword_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->proxyPassword);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_Config_proxyAllowCleartextAuth_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0, bool _swig_go_1) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool arg2 ;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->proxyAllowCleartextAuth = arg2;
  
}


bool _wrap_ClientAPI_Config_proxyAllowCleartextAuth_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  result = (bool) ((arg1)->proxyAllowCleartextAuth);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_Config_altProxy_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0, bool _swig_go_1) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool arg2 ;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->altProxy = arg2;
  
}


bool _wrap_ClientAPI_Config_altProxy_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  result = (bool) ((arg1)->altProxy);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_Config_dco_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0, bool _swig_go_1) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool arg2 ;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->dco = arg2;
  
}


bool _wrap_ClientAPI_Config_dco_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  result = (bool) ((arg1)->dco);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_Config_echo_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0, bool _swig_go_1) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool arg2 ;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->echo = arg2;
  
}


bool _wrap_ClientAPI_Config_echo_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  result = (bool) ((arg1)->echo);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_Config_info_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0, bool _swig_go_1) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool arg2 ;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->info = arg2;
  
}


bool _wrap_ClientAPI_Config_info_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  result = (bool) ((arg1)->info);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_Config_allowLocalLanAccess_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0, bool _swig_go_1) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool arg2 ;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->allowLocalLanAccess = arg2;
  
}


bool _wrap_ClientAPI_Config_allowLocalLanAccess_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  result = (bool) ((arg1)->allowLocalLanAccess);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_Config_clockTickMS_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0, intgo _swig_go_1) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  arg2 = (unsigned int)_swig_go_1; 
  
  if (arg1) (arg1)->clockTickMS = arg2;
  
}


intgo _wrap_ClientAPI_Config_clockTickMS_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  result = (unsigned int) ((arg1)->clockTickMS);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_Config_gremlinConfig_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->gremlinConfig = *arg2;
  
}


_gostring_ _wrap_ClientAPI_Config_gremlinConfig_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->gremlinConfig);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_Config_wintun_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0, bool _swig_go_1) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool arg2 ;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->wintun = arg2;
  
}


bool _wrap_ClientAPI_Config_wintun_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  result = (bool) ((arg1)->wintun);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_Config_allowLocalDnsResolvers_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0, bool _swig_go_1) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool arg2 ;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->allowLocalDnsResolvers = arg2;
  
}


bool _wrap_ClientAPI_Config_allowLocalDnsResolvers_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  result = (bool) ((arg1)->allowLocalDnsResolvers);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_Config_enableLegacyAlgorithms_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0, bool _swig_go_1) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool arg2 ;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->enableLegacyAlgorithms = arg2;
  
}


bool _wrap_ClientAPI_Config_enableLegacyAlgorithms_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  result = (bool) ((arg1)->enableLegacyAlgorithms);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_Config_enableNonPreferredDCAlgorithms_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0, bool _swig_go_1) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool arg2 ;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->enableNonPreferredDCAlgorithms = arg2;
  
}


bool _wrap_ClientAPI_Config_enableNonPreferredDCAlgorithms_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  result = (bool) ((arg1)->enableNonPreferredDCAlgorithms);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_Config_generate_tun_builder_capture_event_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0, bool _swig_go_1) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool arg2 ;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->generate_tun_builder_capture_event = arg2;
  
}


bool _wrap_ClientAPI_Config_generate_tun_builder_capture_event_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  result = (bool) ((arg1)->generate_tun_builder_capture_event);
  _swig_go_result = result; 
  return _swig_go_result;
}


openvpn::ClientAPI::Config *_wrap_new_ClientAPI_Config_ovpncli_f208ab142d9be705() {
  openvpn::ClientAPI::Config *result = 0 ;
  openvpn::ClientAPI::Config *_swig_go_result;
  
  
  result = (openvpn::ClientAPI::Config *)new openvpn::ClientAPI::Config();
  *(openvpn::ClientAPI::Config **)&_swig_go_result = (openvpn::ClientAPI::Config *)result; 
  return _swig_go_result;
}


void _wrap_delete_ClientAPI_Config_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Config *_swig_go_0) {
  openvpn::ClientAPI::Config *arg1 = (openvpn::ClientAPI::Config *) 0 ;
  
  arg1 = *(openvpn::ClientAPI::Config **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_ClientAPI_Event_error_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Event *_swig_go_0, bool _swig_go_1) {
  openvpn::ClientAPI::Event *arg1 = (openvpn::ClientAPI::Event *) 0 ;
  bool arg2 ;
  
  arg1 = *(openvpn::ClientAPI::Event **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->error = arg2;
  
}


bool _wrap_ClientAPI_Event_error_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Event *_swig_go_0) {
  openvpn::ClientAPI::Event *arg1 = (openvpn::ClientAPI::Event *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Event **)&_swig_go_0; 
  
  result = (bool) ((arg1)->error);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_Event_fatal_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Event *_swig_go_0, bool _swig_go_1) {
  openvpn::ClientAPI::Event *arg1 = (openvpn::ClientAPI::Event *) 0 ;
  bool arg2 ;
  
  arg1 = *(openvpn::ClientAPI::Event **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->fatal = arg2;
  
}


bool _wrap_ClientAPI_Event_fatal_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Event *_swig_go_0) {
  openvpn::ClientAPI::Event *arg1 = (openvpn::ClientAPI::Event *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Event **)&_swig_go_0; 
  
  result = (bool) ((arg1)->fatal);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_Event_name_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Event *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::Event *arg1 = (openvpn::ClientAPI::Event *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::Event **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->name = *arg2;
  
}


_gostring_ _wrap_ClientAPI_Event_name_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Event *_swig_go_0) {
  openvpn::ClientAPI::Event *arg1 = (openvpn::ClientAPI::Event *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Event **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->name);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_Event_info_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Event *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::Event *arg1 = (openvpn::ClientAPI::Event *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::Event **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->info = *arg2;
  
}


_gostring_ _wrap_ClientAPI_Event_info_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Event *_swig_go_0) {
  openvpn::ClientAPI::Event *arg1 = (openvpn::ClientAPI::Event *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Event **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->info);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


openvpn::ClientAPI::Event *_wrap_new_ClientAPI_Event_ovpncli_f208ab142d9be705() {
  openvpn::ClientAPI::Event *result = 0 ;
  openvpn::ClientAPI::Event *_swig_go_result;
  
  
  result = (openvpn::ClientAPI::Event *)new openvpn::ClientAPI::Event();
  *(openvpn::ClientAPI::Event **)&_swig_go_result = (openvpn::ClientAPI::Event *)result; 
  return _swig_go_result;
}


void _wrap_delete_ClientAPI_Event_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Event *_swig_go_0) {
  openvpn::ClientAPI::Event *arg1 = (openvpn::ClientAPI::Event *) 0 ;
  
  arg1 = *(openvpn::ClientAPI::Event **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_ClientAPI_ConnectionInfo_defined_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ConnectionInfo *_swig_go_0, bool _swig_go_1) {
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  bool arg2 ;
  
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->defined = arg2;
  
}


bool _wrap_ClientAPI_ConnectionInfo_defined_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ConnectionInfo *_swig_go_0) {
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&_swig_go_0; 
  
  result = (bool) ((arg1)->defined);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_ConnectionInfo_user_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ConnectionInfo *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->user = *arg2;
  
}


_gostring_ _wrap_ClientAPI_ConnectionInfo_user_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ConnectionInfo *_swig_go_0) {
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->user);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_ConnectionInfo_serverHost_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ConnectionInfo *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->serverHost = *arg2;
  
}


_gostring_ _wrap_ClientAPI_ConnectionInfo_serverHost_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ConnectionInfo *_swig_go_0) {
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->serverHost);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_ConnectionInfo_serverPort_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ConnectionInfo *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->serverPort = *arg2;
  
}


_gostring_ _wrap_ClientAPI_ConnectionInfo_serverPort_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ConnectionInfo *_swig_go_0) {
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->serverPort);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_ConnectionInfo_serverProto_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ConnectionInfo *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->serverProto = *arg2;
  
}


_gostring_ _wrap_ClientAPI_ConnectionInfo_serverProto_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ConnectionInfo *_swig_go_0) {
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->serverProto);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_ConnectionInfo_serverIp_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ConnectionInfo *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->serverIp = *arg2;
  
}


_gostring_ _wrap_ClientAPI_ConnectionInfo_serverIp_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ConnectionInfo *_swig_go_0) {
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->serverIp);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_ConnectionInfo_vpnIp4_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ConnectionInfo *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->vpnIp4 = *arg2;
  
}


_gostring_ _wrap_ClientAPI_ConnectionInfo_vpnIp4_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ConnectionInfo *_swig_go_0) {
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->vpnIp4);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_ConnectionInfo_vpnIp6_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ConnectionInfo *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->vpnIp6 = *arg2;
  
}


_gostring_ _wrap_ClientAPI_ConnectionInfo_vpnIp6_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ConnectionInfo *_swig_go_0) {
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->vpnIp6);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_ConnectionInfo_vpnMtu_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ConnectionInfo *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->vpnMtu = *arg2;
  
}


_gostring_ _wrap_ClientAPI_ConnectionInfo_vpnMtu_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ConnectionInfo *_swig_go_0) {
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->vpnMtu);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_ConnectionInfo_gw4_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ConnectionInfo *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->gw4 = *arg2;
  
}


_gostring_ _wrap_ClientAPI_ConnectionInfo_gw4_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ConnectionInfo *_swig_go_0) {
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->gw4);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_ConnectionInfo_gw6_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ConnectionInfo *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->gw6 = *arg2;
  
}


_gostring_ _wrap_ClientAPI_ConnectionInfo_gw6_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ConnectionInfo *_swig_go_0) {
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->gw6);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_ConnectionInfo_clientIp_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ConnectionInfo *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->clientIp = *arg2;
  
}


_gostring_ _wrap_ClientAPI_ConnectionInfo_clientIp_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ConnectionInfo *_swig_go_0) {
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->clientIp);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_ConnectionInfo_tunName_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ConnectionInfo *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->tunName = *arg2;
  
}


_gostring_ _wrap_ClientAPI_ConnectionInfo_tunName_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ConnectionInfo *_swig_go_0) {
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->tunName);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


openvpn::ClientAPI::ConnectionInfo *_wrap_new_ClientAPI_ConnectionInfo_ovpncli_f208ab142d9be705() {
  openvpn::ClientAPI::ConnectionInfo *result = 0 ;
  openvpn::ClientAPI::ConnectionInfo *_swig_go_result;
  
  
  result = (openvpn::ClientAPI::ConnectionInfo *)new openvpn::ClientAPI::ConnectionInfo();
  *(openvpn::ClientAPI::ConnectionInfo **)&_swig_go_result = (openvpn::ClientAPI::ConnectionInfo *)result; 
  return _swig_go_result;
}


void _wrap_delete_ClientAPI_ConnectionInfo_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ConnectionInfo *_swig_go_0) {
  openvpn::ClientAPI::ConnectionInfo *arg1 = (openvpn::ClientAPI::ConnectionInfo *) 0 ;
  
  arg1 = *(openvpn::ClientAPI::ConnectionInfo **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_ClientAPI_Status_error_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Status *_swig_go_0, bool _swig_go_1) {
  openvpn::ClientAPI::Status *arg1 = (openvpn::ClientAPI::Status *) 0 ;
  bool arg2 ;
  
  arg1 = *(openvpn::ClientAPI::Status **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->error = arg2;
  
}


bool _wrap_ClientAPI_Status_error_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Status *_swig_go_0) {
  openvpn::ClientAPI::Status *arg1 = (openvpn::ClientAPI::Status *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Status **)&_swig_go_0; 
  
  result = (bool) ((arg1)->error);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_Status_status_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Status *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::Status *arg1 = (openvpn::ClientAPI::Status *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::Status **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->status = *arg2;
  
}


_gostring_ _wrap_ClientAPI_Status_status_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Status *_swig_go_0) {
  openvpn::ClientAPI::Status *arg1 = (openvpn::ClientAPI::Status *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Status **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->status);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_Status_message_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Status *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::Status *arg1 = (openvpn::ClientAPI::Status *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::Status **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->message = *arg2;
  
}


_gostring_ _wrap_ClientAPI_Status_message_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Status *_swig_go_0) {
  openvpn::ClientAPI::Status *arg1 = (openvpn::ClientAPI::Status *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::Status **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->message);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


openvpn::ClientAPI::Status *_wrap_new_ClientAPI_Status_ovpncli_f208ab142d9be705() {
  openvpn::ClientAPI::Status *result = 0 ;
  openvpn::ClientAPI::Status *_swig_go_result;
  
  
  result = (openvpn::ClientAPI::Status *)new openvpn::ClientAPI::Status();
  *(openvpn::ClientAPI::Status **)&_swig_go_result = (openvpn::ClientAPI::Status *)result; 
  return _swig_go_result;
}


void _wrap_delete_ClientAPI_Status_ovpncli_f208ab142d9be705(openvpn::ClientAPI::Status *_swig_go_0) {
  openvpn::ClientAPI::Status *arg1 = (openvpn::ClientAPI::Status *) 0 ;
  
  arg1 = *(openvpn::ClientAPI::Status **)&_swig_go_0; 
  
  delete arg1;
  
}


openvpn::ClientAPI::LogInfo *_wrap_new_ClientAPI_LogInfo__SWIG_0_ovpncli_f208ab142d9be705() {
  openvpn::ClientAPI::LogInfo *result = 0 ;
  openvpn::ClientAPI::LogInfo *_swig_go_result;
  
  
  result = (openvpn::ClientAPI::LogInfo *)new openvpn::ClientAPI::LogInfo();
  *(openvpn::ClientAPI::LogInfo **)&_swig_go_result = (openvpn::ClientAPI::LogInfo *)result; 
  return _swig_go_result;
}


openvpn::ClientAPI::LogInfo *_wrap_new_ClientAPI_LogInfo__SWIG_1_ovpncli_f208ab142d9be705(_gostring_ _swig_go_0) {
  std::string arg1 ;
  openvpn::ClientAPI::LogInfo *result = 0 ;
  openvpn::ClientAPI::LogInfo *_swig_go_result;
  
  (&arg1)->assign(_swig_go_0.p, _swig_go_0.n); 
  
  result = (openvpn::ClientAPI::LogInfo *)new openvpn::ClientAPI::LogInfo(arg1);
  *(openvpn::ClientAPI::LogInfo **)&_swig_go_result = (openvpn::ClientAPI::LogInfo *)result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_LogInfo_text_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::LogInfo *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::LogInfo *arg1 = (openvpn::ClientAPI::LogInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::LogInfo **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->text = *arg2;
  
}


_gostring_ _wrap_ClientAPI_LogInfo_text_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::LogInfo *_swig_go_0) {
  openvpn::ClientAPI::LogInfo *arg1 = (openvpn::ClientAPI::LogInfo *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::LogInfo **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->text);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_delete_ClientAPI_LogInfo_ovpncli_f208ab142d9be705(openvpn::ClientAPI::LogInfo *_swig_go_0) {
  openvpn::ClientAPI::LogInfo *arg1 = (openvpn::ClientAPI::LogInfo *) 0 ;
  
  arg1 = *(openvpn::ClientAPI::LogInfo **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_ClientAPI_InterfaceStats_bytesIn_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::InterfaceStats *_swig_go_0, long long _swig_go_1) {
  openvpn::ClientAPI::InterfaceStats *arg1 = (openvpn::ClientAPI::InterfaceStats *) 0 ;
  long long arg2 ;
  
  arg1 = *(openvpn::ClientAPI::InterfaceStats **)&_swig_go_0; 
  arg2 = (long long)_swig_go_1; 
  
  if (arg1) (arg1)->bytesIn = arg2;
  
}


long long _wrap_ClientAPI_InterfaceStats_bytesIn_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::InterfaceStats *_swig_go_0) {
  openvpn::ClientAPI::InterfaceStats *arg1 = (openvpn::ClientAPI::InterfaceStats *) 0 ;
  long long result;
  long long _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::InterfaceStats **)&_swig_go_0; 
  
  result = (long long) ((arg1)->bytesIn);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_InterfaceStats_packetsIn_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::InterfaceStats *_swig_go_0, long long _swig_go_1) {
  openvpn::ClientAPI::InterfaceStats *arg1 = (openvpn::ClientAPI::InterfaceStats *) 0 ;
  long long arg2 ;
  
  arg1 = *(openvpn::ClientAPI::InterfaceStats **)&_swig_go_0; 
  arg2 = (long long)_swig_go_1; 
  
  if (arg1) (arg1)->packetsIn = arg2;
  
}


long long _wrap_ClientAPI_InterfaceStats_packetsIn_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::InterfaceStats *_swig_go_0) {
  openvpn::ClientAPI::InterfaceStats *arg1 = (openvpn::ClientAPI::InterfaceStats *) 0 ;
  long long result;
  long long _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::InterfaceStats **)&_swig_go_0; 
  
  result = (long long) ((arg1)->packetsIn);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_InterfaceStats_errorsIn_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::InterfaceStats *_swig_go_0, long long _swig_go_1) {
  openvpn::ClientAPI::InterfaceStats *arg1 = (openvpn::ClientAPI::InterfaceStats *) 0 ;
  long long arg2 ;
  
  arg1 = *(openvpn::ClientAPI::InterfaceStats **)&_swig_go_0; 
  arg2 = (long long)_swig_go_1; 
  
  if (arg1) (arg1)->errorsIn = arg2;
  
}


long long _wrap_ClientAPI_InterfaceStats_errorsIn_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::InterfaceStats *_swig_go_0) {
  openvpn::ClientAPI::InterfaceStats *arg1 = (openvpn::ClientAPI::InterfaceStats *) 0 ;
  long long result;
  long long _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::InterfaceStats **)&_swig_go_0; 
  
  result = (long long) ((arg1)->errorsIn);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_InterfaceStats_bytesOut_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::InterfaceStats *_swig_go_0, long long _swig_go_1) {
  openvpn::ClientAPI::InterfaceStats *arg1 = (openvpn::ClientAPI::InterfaceStats *) 0 ;
  long long arg2 ;
  
  arg1 = *(openvpn::ClientAPI::InterfaceStats **)&_swig_go_0; 
  arg2 = (long long)_swig_go_1; 
  
  if (arg1) (arg1)->bytesOut = arg2;
  
}


long long _wrap_ClientAPI_InterfaceStats_bytesOut_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::InterfaceStats *_swig_go_0) {
  openvpn::ClientAPI::InterfaceStats *arg1 = (openvpn::ClientAPI::InterfaceStats *) 0 ;
  long long result;
  long long _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::InterfaceStats **)&_swig_go_0; 
  
  result = (long long) ((arg1)->bytesOut);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_InterfaceStats_packetsOut_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::InterfaceStats *_swig_go_0, long long _swig_go_1) {
  openvpn::ClientAPI::InterfaceStats *arg1 = (openvpn::ClientAPI::InterfaceStats *) 0 ;
  long long arg2 ;
  
  arg1 = *(openvpn::ClientAPI::InterfaceStats **)&_swig_go_0; 
  arg2 = (long long)_swig_go_1; 
  
  if (arg1) (arg1)->packetsOut = arg2;
  
}


long long _wrap_ClientAPI_InterfaceStats_packetsOut_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::InterfaceStats *_swig_go_0) {
  openvpn::ClientAPI::InterfaceStats *arg1 = (openvpn::ClientAPI::InterfaceStats *) 0 ;
  long long result;
  long long _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::InterfaceStats **)&_swig_go_0; 
  
  result = (long long) ((arg1)->packetsOut);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_InterfaceStats_errorsOut_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::InterfaceStats *_swig_go_0, long long _swig_go_1) {
  openvpn::ClientAPI::InterfaceStats *arg1 = (openvpn::ClientAPI::InterfaceStats *) 0 ;
  long long arg2 ;
  
  arg1 = *(openvpn::ClientAPI::InterfaceStats **)&_swig_go_0; 
  arg2 = (long long)_swig_go_1; 
  
  if (arg1) (arg1)->errorsOut = arg2;
  
}


long long _wrap_ClientAPI_InterfaceStats_errorsOut_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::InterfaceStats *_swig_go_0) {
  openvpn::ClientAPI::InterfaceStats *arg1 = (openvpn::ClientAPI::InterfaceStats *) 0 ;
  long long result;
  long long _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::InterfaceStats **)&_swig_go_0; 
  
  result = (long long) ((arg1)->errorsOut);
  _swig_go_result = result; 
  return _swig_go_result;
}


openvpn::ClientAPI::InterfaceStats *_wrap_new_ClientAPI_InterfaceStats_ovpncli_f208ab142d9be705() {
  openvpn::ClientAPI::InterfaceStats *result = 0 ;
  openvpn::ClientAPI::InterfaceStats *_swig_go_result;
  
  
  result = (openvpn::ClientAPI::InterfaceStats *)new openvpn::ClientAPI::InterfaceStats();
  *(openvpn::ClientAPI::InterfaceStats **)&_swig_go_result = (openvpn::ClientAPI::InterfaceStats *)result; 
  return _swig_go_result;
}


void _wrap_delete_ClientAPI_InterfaceStats_ovpncli_f208ab142d9be705(openvpn::ClientAPI::InterfaceStats *_swig_go_0) {
  openvpn::ClientAPI::InterfaceStats *arg1 = (openvpn::ClientAPI::InterfaceStats *) 0 ;
  
  arg1 = *(openvpn::ClientAPI::InterfaceStats **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_ClientAPI_TransportStats_bytesIn_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::TransportStats *_swig_go_0, long long _swig_go_1) {
  openvpn::ClientAPI::TransportStats *arg1 = (openvpn::ClientAPI::TransportStats *) 0 ;
  long long arg2 ;
  
  arg1 = *(openvpn::ClientAPI::TransportStats **)&_swig_go_0; 
  arg2 = (long long)_swig_go_1; 
  
  if (arg1) (arg1)->bytesIn = arg2;
  
}


long long _wrap_ClientAPI_TransportStats_bytesIn_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::TransportStats *_swig_go_0) {
  openvpn::ClientAPI::TransportStats *arg1 = (openvpn::ClientAPI::TransportStats *) 0 ;
  long long result;
  long long _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::TransportStats **)&_swig_go_0; 
  
  result = (long long) ((arg1)->bytesIn);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_TransportStats_bytesOut_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::TransportStats *_swig_go_0, long long _swig_go_1) {
  openvpn::ClientAPI::TransportStats *arg1 = (openvpn::ClientAPI::TransportStats *) 0 ;
  long long arg2 ;
  
  arg1 = *(openvpn::ClientAPI::TransportStats **)&_swig_go_0; 
  arg2 = (long long)_swig_go_1; 
  
  if (arg1) (arg1)->bytesOut = arg2;
  
}


long long _wrap_ClientAPI_TransportStats_bytesOut_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::TransportStats *_swig_go_0) {
  openvpn::ClientAPI::TransportStats *arg1 = (openvpn::ClientAPI::TransportStats *) 0 ;
  long long result;
  long long _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::TransportStats **)&_swig_go_0; 
  
  result = (long long) ((arg1)->bytesOut);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_TransportStats_packetsIn_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::TransportStats *_swig_go_0, long long _swig_go_1) {
  openvpn::ClientAPI::TransportStats *arg1 = (openvpn::ClientAPI::TransportStats *) 0 ;
  long long arg2 ;
  
  arg1 = *(openvpn::ClientAPI::TransportStats **)&_swig_go_0; 
  arg2 = (long long)_swig_go_1; 
  
  if (arg1) (arg1)->packetsIn = arg2;
  
}


long long _wrap_ClientAPI_TransportStats_packetsIn_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::TransportStats *_swig_go_0) {
  openvpn::ClientAPI::TransportStats *arg1 = (openvpn::ClientAPI::TransportStats *) 0 ;
  long long result;
  long long _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::TransportStats **)&_swig_go_0; 
  
  result = (long long) ((arg1)->packetsIn);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_TransportStats_packetsOut_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::TransportStats *_swig_go_0, long long _swig_go_1) {
  openvpn::ClientAPI::TransportStats *arg1 = (openvpn::ClientAPI::TransportStats *) 0 ;
  long long arg2 ;
  
  arg1 = *(openvpn::ClientAPI::TransportStats **)&_swig_go_0; 
  arg2 = (long long)_swig_go_1; 
  
  if (arg1) (arg1)->packetsOut = arg2;
  
}


long long _wrap_ClientAPI_TransportStats_packetsOut_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::TransportStats *_swig_go_0) {
  openvpn::ClientAPI::TransportStats *arg1 = (openvpn::ClientAPI::TransportStats *) 0 ;
  long long result;
  long long _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::TransportStats **)&_swig_go_0; 
  
  result = (long long) ((arg1)->packetsOut);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_TransportStats_lastPacketReceived_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::TransportStats *_swig_go_0, intgo _swig_go_1) {
  openvpn::ClientAPI::TransportStats *arg1 = (openvpn::ClientAPI::TransportStats *) 0 ;
  int arg2 ;
  
  arg1 = *(openvpn::ClientAPI::TransportStats **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->lastPacketReceived = arg2;
  
}


intgo _wrap_ClientAPI_TransportStats_lastPacketReceived_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::TransportStats *_swig_go_0) {
  openvpn::ClientAPI::TransportStats *arg1 = (openvpn::ClientAPI::TransportStats *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::TransportStats **)&_swig_go_0; 
  
  result = (int) ((arg1)->lastPacketReceived);
  _swig_go_result = result; 
  return _swig_go_result;
}


openvpn::ClientAPI::TransportStats *_wrap_new_ClientAPI_TransportStats_ovpncli_f208ab142d9be705() {
  openvpn::ClientAPI::TransportStats *result = 0 ;
  openvpn::ClientAPI::TransportStats *_swig_go_result;
  
  
  result = (openvpn::ClientAPI::TransportStats *)new openvpn::ClientAPI::TransportStats();
  *(openvpn::ClientAPI::TransportStats **)&_swig_go_result = (openvpn::ClientAPI::TransportStats *)result; 
  return _swig_go_result;
}


void _wrap_delete_ClientAPI_TransportStats_ovpncli_f208ab142d9be705(openvpn::ClientAPI::TransportStats *_swig_go_0) {
  openvpn::ClientAPI::TransportStats *arg1 = (openvpn::ClientAPI::TransportStats *) 0 ;
  
  arg1 = *(openvpn::ClientAPI::TransportStats **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_ClientAPI_MergeConfig_status_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::MergeConfig *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::MergeConfig *arg1 = (openvpn::ClientAPI::MergeConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::MergeConfig **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->status = *arg2;
  
}


_gostring_ _wrap_ClientAPI_MergeConfig_status_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::MergeConfig *_swig_go_0) {
  openvpn::ClientAPI::MergeConfig *arg1 = (openvpn::ClientAPI::MergeConfig *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::MergeConfig **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->status);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_MergeConfig_errorText_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::MergeConfig *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::MergeConfig *arg1 = (openvpn::ClientAPI::MergeConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::MergeConfig **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->errorText = *arg2;
  
}


_gostring_ _wrap_ClientAPI_MergeConfig_errorText_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::MergeConfig *_swig_go_0) {
  openvpn::ClientAPI::MergeConfig *arg1 = (openvpn::ClientAPI::MergeConfig *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::MergeConfig **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->errorText);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_MergeConfig_basename_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::MergeConfig *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::MergeConfig *arg1 = (openvpn::ClientAPI::MergeConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::MergeConfig **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->basename = *arg2;
  
}


_gostring_ _wrap_ClientAPI_MergeConfig_basename_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::MergeConfig *_swig_go_0) {
  openvpn::ClientAPI::MergeConfig *arg1 = (openvpn::ClientAPI::MergeConfig *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::MergeConfig **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->basename);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_MergeConfig_profileContent_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::MergeConfig *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::MergeConfig *arg1 = (openvpn::ClientAPI::MergeConfig *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::MergeConfig **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->profileContent = *arg2;
  
}


_gostring_ _wrap_ClientAPI_MergeConfig_profileContent_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::MergeConfig *_swig_go_0) {
  openvpn::ClientAPI::MergeConfig *arg1 = (openvpn::ClientAPI::MergeConfig *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::MergeConfig **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->profileContent);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_MergeConfig_refPathList_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::MergeConfig *_swig_go_0, std::vector< std::string > *_swig_go_1) {
  openvpn::ClientAPI::MergeConfig *arg1 = (openvpn::ClientAPI::MergeConfig *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  arg1 = *(openvpn::ClientAPI::MergeConfig **)&_swig_go_0; 
  arg2 = *(std::vector< std::string > **)&_swig_go_1; 
  
  if (arg1) (arg1)->refPathList = *arg2;
  
}


std::vector< std::string > *_wrap_ClientAPI_MergeConfig_refPathList_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::MergeConfig *_swig_go_0) {
  openvpn::ClientAPI::MergeConfig *arg1 = (openvpn::ClientAPI::MergeConfig *) 0 ;
  std::vector< std::string > *result = 0 ;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::MergeConfig **)&_swig_go_0; 
  
  result = (std::vector< std::string > *)& ((arg1)->refPathList);
  *(std::vector< std::string > **)&_swig_go_result = (std::vector< std::string > *)result; 
  return _swig_go_result;
}


openvpn::ClientAPI::MergeConfig *_wrap_new_ClientAPI_MergeConfig_ovpncli_f208ab142d9be705() {
  openvpn::ClientAPI::MergeConfig *result = 0 ;
  openvpn::ClientAPI::MergeConfig *_swig_go_result;
  
  
  result = (openvpn::ClientAPI::MergeConfig *)new openvpn::ClientAPI::MergeConfig();
  *(openvpn::ClientAPI::MergeConfig **)&_swig_go_result = (openvpn::ClientAPI::MergeConfig *)result; 
  return _swig_go_result;
}


void _wrap_delete_ClientAPI_MergeConfig_ovpncli_f208ab142d9be705(openvpn::ClientAPI::MergeConfig *_swig_go_0) {
  openvpn::ClientAPI::MergeConfig *arg1 = (openvpn::ClientAPI::MergeConfig *) 0 ;
  
  arg1 = *(openvpn::ClientAPI::MergeConfig **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_ClientAPI_ExternalPKIRequestBase_error_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ExternalPKIRequestBase *_swig_go_0, bool _swig_go_1) {
  openvpn::ClientAPI::ExternalPKIRequestBase *arg1 = (openvpn::ClientAPI::ExternalPKIRequestBase *) 0 ;
  bool arg2 ;
  
  arg1 = *(openvpn::ClientAPI::ExternalPKIRequestBase **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->error = arg2;
  
}


bool _wrap_ClientAPI_ExternalPKIRequestBase_error_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ExternalPKIRequestBase *_swig_go_0) {
  openvpn::ClientAPI::ExternalPKIRequestBase *arg1 = (openvpn::ClientAPI::ExternalPKIRequestBase *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::ExternalPKIRequestBase **)&_swig_go_0; 
  
  result = (bool) ((arg1)->error);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_ExternalPKIRequestBase_errorText_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ExternalPKIRequestBase *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::ExternalPKIRequestBase *arg1 = (openvpn::ClientAPI::ExternalPKIRequestBase *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::ExternalPKIRequestBase **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->errorText = *arg2;
  
}


_gostring_ _wrap_ClientAPI_ExternalPKIRequestBase_errorText_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ExternalPKIRequestBase *_swig_go_0) {
  openvpn::ClientAPI::ExternalPKIRequestBase *arg1 = (openvpn::ClientAPI::ExternalPKIRequestBase *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::ExternalPKIRequestBase **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->errorText);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_ExternalPKIRequestBase_invalidAlias_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ExternalPKIRequestBase *_swig_go_0, bool _swig_go_1) {
  openvpn::ClientAPI::ExternalPKIRequestBase *arg1 = (openvpn::ClientAPI::ExternalPKIRequestBase *) 0 ;
  bool arg2 ;
  
  arg1 = *(openvpn::ClientAPI::ExternalPKIRequestBase **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->invalidAlias = arg2;
  
}


bool _wrap_ClientAPI_ExternalPKIRequestBase_invalidAlias_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ExternalPKIRequestBase *_swig_go_0) {
  openvpn::ClientAPI::ExternalPKIRequestBase *arg1 = (openvpn::ClientAPI::ExternalPKIRequestBase *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::ExternalPKIRequestBase **)&_swig_go_0; 
  
  result = (bool) ((arg1)->invalidAlias);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_ExternalPKIRequestBase_alias_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ExternalPKIRequestBase *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::ExternalPKIRequestBase *arg1 = (openvpn::ClientAPI::ExternalPKIRequestBase *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::ExternalPKIRequestBase **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->alias = *arg2;
  
}


_gostring_ _wrap_ClientAPI_ExternalPKIRequestBase_alias_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ExternalPKIRequestBase *_swig_go_0) {
  openvpn::ClientAPI::ExternalPKIRequestBase *arg1 = (openvpn::ClientAPI::ExternalPKIRequestBase *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::ExternalPKIRequestBase **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->alias);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


openvpn::ClientAPI::ExternalPKIRequestBase *_wrap_new_ClientAPI_ExternalPKIRequestBase_ovpncli_f208ab142d9be705() {
  openvpn::ClientAPI::ExternalPKIRequestBase *result = 0 ;
  openvpn::ClientAPI::ExternalPKIRequestBase *_swig_go_result;
  
  
  result = (openvpn::ClientAPI::ExternalPKIRequestBase *)new openvpn::ClientAPI::ExternalPKIRequestBase();
  *(openvpn::ClientAPI::ExternalPKIRequestBase **)&_swig_go_result = (openvpn::ClientAPI::ExternalPKIRequestBase *)result; 
  return _swig_go_result;
}


void _wrap_delete_ClientAPI_ExternalPKIRequestBase_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ExternalPKIRequestBase *_swig_go_0) {
  openvpn::ClientAPI::ExternalPKIRequestBase *arg1 = (openvpn::ClientAPI::ExternalPKIRequestBase *) 0 ;
  
  arg1 = *(openvpn::ClientAPI::ExternalPKIRequestBase **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_ClientAPI_ExternalPKICertRequest_cert_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ExternalPKICertRequest *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::ExternalPKICertRequest *arg1 = (openvpn::ClientAPI::ExternalPKICertRequest *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::ExternalPKICertRequest **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->cert = *arg2;
  
}


_gostring_ _wrap_ClientAPI_ExternalPKICertRequest_cert_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ExternalPKICertRequest *_swig_go_0) {
  openvpn::ClientAPI::ExternalPKICertRequest *arg1 = (openvpn::ClientAPI::ExternalPKICertRequest *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::ExternalPKICertRequest **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->cert);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_ExternalPKICertRequest_supportingChain_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ExternalPKICertRequest *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::ExternalPKICertRequest *arg1 = (openvpn::ClientAPI::ExternalPKICertRequest *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::ExternalPKICertRequest **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->supportingChain = *arg2;
  
}


_gostring_ _wrap_ClientAPI_ExternalPKICertRequest_supportingChain_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ExternalPKICertRequest *_swig_go_0) {
  openvpn::ClientAPI::ExternalPKICertRequest *arg1 = (openvpn::ClientAPI::ExternalPKICertRequest *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::ExternalPKICertRequest **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->supportingChain);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


openvpn::ClientAPI::ExternalPKICertRequest *_wrap_new_ClientAPI_ExternalPKICertRequest_ovpncli_f208ab142d9be705() {
  openvpn::ClientAPI::ExternalPKICertRequest *result = 0 ;
  openvpn::ClientAPI::ExternalPKICertRequest *_swig_go_result;
  
  
  result = (openvpn::ClientAPI::ExternalPKICertRequest *)new openvpn::ClientAPI::ExternalPKICertRequest();
  *(openvpn::ClientAPI::ExternalPKICertRequest **)&_swig_go_result = (openvpn::ClientAPI::ExternalPKICertRequest *)result; 
  return _swig_go_result;
}


void _wrap_delete_ClientAPI_ExternalPKICertRequest_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ExternalPKICertRequest *_swig_go_0) {
  openvpn::ClientAPI::ExternalPKICertRequest *arg1 = (openvpn::ClientAPI::ExternalPKICertRequest *) 0 ;
  
  arg1 = *(openvpn::ClientAPI::ExternalPKICertRequest **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_SetClientAPI_ExternalPKICertRequest_Error_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ExternalPKICertRequest *_swig_go_0, bool _swig_go_1) {
  openvpn::ClientAPI::ExternalPKICertRequest *arg1 = (openvpn::ClientAPI::ExternalPKICertRequest *) 0 ;
  bool arg2 ;
  
  arg1 = *(openvpn::ClientAPI::ExternalPKICertRequest **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  openvpn::ClientAPI::ExternalPKIRequestBase *swig_b0 = (openvpn::ClientAPI::ExternalPKIRequestBase *)arg1;
  if (swig_b0) (swig_b0)->error = arg2;
  
}


bool _wrap_GetClientAPI_ExternalPKICertRequest_Error_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ExternalPKICertRequest *_swig_go_0) {
  openvpn::ClientAPI::ExternalPKICertRequest *arg1 = (openvpn::ClientAPI::ExternalPKICertRequest *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::ExternalPKICertRequest **)&_swig_go_0; 
  
  openvpn::ClientAPI::ExternalPKIRequestBase *swig_b0 = (openvpn::ClientAPI::ExternalPKIRequestBase *)arg1;
  result = (bool) ((swig_b0)->error);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SetClientAPI_ExternalPKICertRequest_ErrorText_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ExternalPKICertRequest *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::ExternalPKICertRequest *arg1 = (openvpn::ClientAPI::ExternalPKICertRequest *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::ExternalPKICertRequest **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  openvpn::ClientAPI::ExternalPKIRequestBase *swig_b0 = (openvpn::ClientAPI::ExternalPKIRequestBase *)arg1;
  if (swig_b0) (swig_b0)->errorText = *arg2;
  
}


_gostring_ _wrap_GetClientAPI_ExternalPKICertRequest_ErrorText_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ExternalPKICertRequest *_swig_go_0) {
  openvpn::ClientAPI::ExternalPKICertRequest *arg1 = (openvpn::ClientAPI::ExternalPKICertRequest *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::ExternalPKICertRequest **)&_swig_go_0; 
  
  openvpn::ClientAPI::ExternalPKIRequestBase *swig_b0 = (openvpn::ClientAPI::ExternalPKIRequestBase *)arg1;
  result = (std::string *) & ((swig_b0)->errorText);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_SetClientAPI_ExternalPKICertRequest_InvalidAlias_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ExternalPKICertRequest *_swig_go_0, bool _swig_go_1) {
  openvpn::ClientAPI::ExternalPKICertRequest *arg1 = (openvpn::ClientAPI::ExternalPKICertRequest *) 0 ;
  bool arg2 ;
  
  arg1 = *(openvpn::ClientAPI::ExternalPKICertRequest **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  openvpn::ClientAPI::ExternalPKIRequestBase *swig_b0 = (openvpn::ClientAPI::ExternalPKIRequestBase *)arg1;
  if (swig_b0) (swig_b0)->invalidAlias = arg2;
  
}


bool _wrap_GetClientAPI_ExternalPKICertRequest_InvalidAlias_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ExternalPKICertRequest *_swig_go_0) {
  openvpn::ClientAPI::ExternalPKICertRequest *arg1 = (openvpn::ClientAPI::ExternalPKICertRequest *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::ExternalPKICertRequest **)&_swig_go_0; 
  
  openvpn::ClientAPI::ExternalPKIRequestBase *swig_b0 = (openvpn::ClientAPI::ExternalPKIRequestBase *)arg1;
  result = (bool) ((swig_b0)->invalidAlias);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SetClientAPI_ExternalPKICertRequest_Alias_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ExternalPKICertRequest *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::ExternalPKICertRequest *arg1 = (openvpn::ClientAPI::ExternalPKICertRequest *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::ExternalPKICertRequest **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  openvpn::ClientAPI::ExternalPKIRequestBase *swig_b0 = (openvpn::ClientAPI::ExternalPKIRequestBase *)arg1;
  if (swig_b0) (swig_b0)->alias = *arg2;
  
}


_gostring_ _wrap_GetClientAPI_ExternalPKICertRequest_Alias_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ExternalPKICertRequest *_swig_go_0) {
  openvpn::ClientAPI::ExternalPKICertRequest *arg1 = (openvpn::ClientAPI::ExternalPKICertRequest *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::ExternalPKICertRequest **)&_swig_go_0; 
  
  openvpn::ClientAPI::ExternalPKIRequestBase *swig_b0 = (openvpn::ClientAPI::ExternalPKIRequestBase *)arg1;
  result = (std::string *) & ((swig_b0)->alias);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_ExternalPKISignRequest_data_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ExternalPKISignRequest *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::ExternalPKISignRequest *arg1 = (openvpn::ClientAPI::ExternalPKISignRequest *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::ExternalPKISignRequest **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->data = *arg2;
  
}


_gostring_ _wrap_ClientAPI_ExternalPKISignRequest_data_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ExternalPKISignRequest *_swig_go_0) {
  openvpn::ClientAPI::ExternalPKISignRequest *arg1 = (openvpn::ClientAPI::ExternalPKISignRequest *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::ExternalPKISignRequest **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->data);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_ExternalPKISignRequest_sig_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ExternalPKISignRequest *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::ExternalPKISignRequest *arg1 = (openvpn::ClientAPI::ExternalPKISignRequest *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::ExternalPKISignRequest **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->sig = *arg2;
  
}


_gostring_ _wrap_ClientAPI_ExternalPKISignRequest_sig_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ExternalPKISignRequest *_swig_go_0) {
  openvpn::ClientAPI::ExternalPKISignRequest *arg1 = (openvpn::ClientAPI::ExternalPKISignRequest *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::ExternalPKISignRequest **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->sig);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_ExternalPKISignRequest_algorithm_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ExternalPKISignRequest *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::ExternalPKISignRequest *arg1 = (openvpn::ClientAPI::ExternalPKISignRequest *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::ExternalPKISignRequest **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->algorithm = *arg2;
  
}


_gostring_ _wrap_ClientAPI_ExternalPKISignRequest_algorithm_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ExternalPKISignRequest *_swig_go_0) {
  openvpn::ClientAPI::ExternalPKISignRequest *arg1 = (openvpn::ClientAPI::ExternalPKISignRequest *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::ExternalPKISignRequest **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->algorithm);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_ExternalPKISignRequest_hashalg_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ExternalPKISignRequest *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::ExternalPKISignRequest *arg1 = (openvpn::ClientAPI::ExternalPKISignRequest *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::ExternalPKISignRequest **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->hashalg = *arg2;
  
}


_gostring_ _wrap_ClientAPI_ExternalPKISignRequest_hashalg_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ExternalPKISignRequest *_swig_go_0) {
  openvpn::ClientAPI::ExternalPKISignRequest *arg1 = (openvpn::ClientAPI::ExternalPKISignRequest *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::ExternalPKISignRequest **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->hashalg);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_ExternalPKISignRequest_saltlen_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ExternalPKISignRequest *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::ExternalPKISignRequest *arg1 = (openvpn::ClientAPI::ExternalPKISignRequest *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::ExternalPKISignRequest **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->saltlen = *arg2;
  
}


_gostring_ _wrap_ClientAPI_ExternalPKISignRequest_saltlen_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ExternalPKISignRequest *_swig_go_0) {
  openvpn::ClientAPI::ExternalPKISignRequest *arg1 = (openvpn::ClientAPI::ExternalPKISignRequest *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::ExternalPKISignRequest **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->saltlen);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


openvpn::ClientAPI::ExternalPKISignRequest *_wrap_new_ClientAPI_ExternalPKISignRequest_ovpncli_f208ab142d9be705() {
  openvpn::ClientAPI::ExternalPKISignRequest *result = 0 ;
  openvpn::ClientAPI::ExternalPKISignRequest *_swig_go_result;
  
  
  result = (openvpn::ClientAPI::ExternalPKISignRequest *)new openvpn::ClientAPI::ExternalPKISignRequest();
  *(openvpn::ClientAPI::ExternalPKISignRequest **)&_swig_go_result = (openvpn::ClientAPI::ExternalPKISignRequest *)result; 
  return _swig_go_result;
}


void _wrap_delete_ClientAPI_ExternalPKISignRequest_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ExternalPKISignRequest *_swig_go_0) {
  openvpn::ClientAPI::ExternalPKISignRequest *arg1 = (openvpn::ClientAPI::ExternalPKISignRequest *) 0 ;
  
  arg1 = *(openvpn::ClientAPI::ExternalPKISignRequest **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_SetClientAPI_ExternalPKISignRequest_Error_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ExternalPKISignRequest *_swig_go_0, bool _swig_go_1) {
  openvpn::ClientAPI::ExternalPKISignRequest *arg1 = (openvpn::ClientAPI::ExternalPKISignRequest *) 0 ;
  bool arg2 ;
  
  arg1 = *(openvpn::ClientAPI::ExternalPKISignRequest **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  openvpn::ClientAPI::ExternalPKIRequestBase *swig_b0 = (openvpn::ClientAPI::ExternalPKIRequestBase *)arg1;
  if (swig_b0) (swig_b0)->error = arg2;
  
}


bool _wrap_GetClientAPI_ExternalPKISignRequest_Error_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ExternalPKISignRequest *_swig_go_0) {
  openvpn::ClientAPI::ExternalPKISignRequest *arg1 = (openvpn::ClientAPI::ExternalPKISignRequest *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::ExternalPKISignRequest **)&_swig_go_0; 
  
  openvpn::ClientAPI::ExternalPKIRequestBase *swig_b0 = (openvpn::ClientAPI::ExternalPKIRequestBase *)arg1;
  result = (bool) ((swig_b0)->error);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SetClientAPI_ExternalPKISignRequest_ErrorText_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ExternalPKISignRequest *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::ExternalPKISignRequest *arg1 = (openvpn::ClientAPI::ExternalPKISignRequest *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::ExternalPKISignRequest **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  openvpn::ClientAPI::ExternalPKIRequestBase *swig_b0 = (openvpn::ClientAPI::ExternalPKIRequestBase *)arg1;
  if (swig_b0) (swig_b0)->errorText = *arg2;
  
}


_gostring_ _wrap_GetClientAPI_ExternalPKISignRequest_ErrorText_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ExternalPKISignRequest *_swig_go_0) {
  openvpn::ClientAPI::ExternalPKISignRequest *arg1 = (openvpn::ClientAPI::ExternalPKISignRequest *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::ExternalPKISignRequest **)&_swig_go_0; 
  
  openvpn::ClientAPI::ExternalPKIRequestBase *swig_b0 = (openvpn::ClientAPI::ExternalPKIRequestBase *)arg1;
  result = (std::string *) & ((swig_b0)->errorText);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_SetClientAPI_ExternalPKISignRequest_InvalidAlias_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ExternalPKISignRequest *_swig_go_0, bool _swig_go_1) {
  openvpn::ClientAPI::ExternalPKISignRequest *arg1 = (openvpn::ClientAPI::ExternalPKISignRequest *) 0 ;
  bool arg2 ;
  
  arg1 = *(openvpn::ClientAPI::ExternalPKISignRequest **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  openvpn::ClientAPI::ExternalPKIRequestBase *swig_b0 = (openvpn::ClientAPI::ExternalPKIRequestBase *)arg1;
  if (swig_b0) (swig_b0)->invalidAlias = arg2;
  
}


bool _wrap_GetClientAPI_ExternalPKISignRequest_InvalidAlias_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ExternalPKISignRequest *_swig_go_0) {
  openvpn::ClientAPI::ExternalPKISignRequest *arg1 = (openvpn::ClientAPI::ExternalPKISignRequest *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::ExternalPKISignRequest **)&_swig_go_0; 
  
  openvpn::ClientAPI::ExternalPKIRequestBase *swig_b0 = (openvpn::ClientAPI::ExternalPKIRequestBase *)arg1;
  result = (bool) ((swig_b0)->invalidAlias);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SetClientAPI_ExternalPKISignRequest_Alias_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ExternalPKISignRequest *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::ExternalPKISignRequest *arg1 = (openvpn::ClientAPI::ExternalPKISignRequest *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::ExternalPKISignRequest **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  openvpn::ClientAPI::ExternalPKIRequestBase *swig_b0 = (openvpn::ClientAPI::ExternalPKIRequestBase *)arg1;
  if (swig_b0) (swig_b0)->alias = *arg2;
  
}


_gostring_ _wrap_GetClientAPI_ExternalPKISignRequest_Alias_ovpncli_f208ab142d9be705(openvpn::ClientAPI::ExternalPKISignRequest *_swig_go_0) {
  openvpn::ClientAPI::ExternalPKISignRequest *arg1 = (openvpn::ClientAPI::ExternalPKISignRequest *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::ExternalPKISignRequest **)&_swig_go_0; 
  
  openvpn::ClientAPI::ExternalPKIRequestBase *swig_b0 = (openvpn::ClientAPI::ExternalPKIRequestBase *)arg1;
  result = (std::string *) & ((swig_b0)->alias);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_RemoteOverride_host_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::RemoteOverride *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::RemoteOverride *arg1 = (openvpn::ClientAPI::RemoteOverride *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::RemoteOverride **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->host = *arg2;
  
}


_gostring_ _wrap_ClientAPI_RemoteOverride_host_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::RemoteOverride *_swig_go_0) {
  openvpn::ClientAPI::RemoteOverride *arg1 = (openvpn::ClientAPI::RemoteOverride *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::RemoteOverride **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->host);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_RemoteOverride_ip_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::RemoteOverride *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::RemoteOverride *arg1 = (openvpn::ClientAPI::RemoteOverride *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::RemoteOverride **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->ip = *arg2;
  
}


_gostring_ _wrap_ClientAPI_RemoteOverride_ip_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::RemoteOverride *_swig_go_0) {
  openvpn::ClientAPI::RemoteOverride *arg1 = (openvpn::ClientAPI::RemoteOverride *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::RemoteOverride **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->ip);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_RemoteOverride_port_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::RemoteOverride *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::RemoteOverride *arg1 = (openvpn::ClientAPI::RemoteOverride *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::RemoteOverride **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->port = *arg2;
  
}


_gostring_ _wrap_ClientAPI_RemoteOverride_port_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::RemoteOverride *_swig_go_0) {
  openvpn::ClientAPI::RemoteOverride *arg1 = (openvpn::ClientAPI::RemoteOverride *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::RemoteOverride **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->port);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_RemoteOverride_proto_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::RemoteOverride *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::RemoteOverride *arg1 = (openvpn::ClientAPI::RemoteOverride *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::RemoteOverride **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->proto = *arg2;
  
}


_gostring_ _wrap_ClientAPI_RemoteOverride_proto_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::RemoteOverride *_swig_go_0) {
  openvpn::ClientAPI::RemoteOverride *arg1 = (openvpn::ClientAPI::RemoteOverride *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::RemoteOverride **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->proto);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_ClientAPI_RemoteOverride_error_set_ovpncli_f208ab142d9be705(openvpn::ClientAPI::RemoteOverride *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::RemoteOverride *arg1 = (openvpn::ClientAPI::RemoteOverride *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::RemoteOverride **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->error = *arg2;
  
}


_gostring_ _wrap_ClientAPI_RemoteOverride_error_get_ovpncli_f208ab142d9be705(openvpn::ClientAPI::RemoteOverride *_swig_go_0) {
  openvpn::ClientAPI::RemoteOverride *arg1 = (openvpn::ClientAPI::RemoteOverride *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::RemoteOverride **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->error);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


openvpn::ClientAPI::RemoteOverride *_wrap_new_ClientAPI_RemoteOverride_ovpncli_f208ab142d9be705() {
  openvpn::ClientAPI::RemoteOverride *result = 0 ;
  openvpn::ClientAPI::RemoteOverride *_swig_go_result;
  
  
  result = (openvpn::ClientAPI::RemoteOverride *)new openvpn::ClientAPI::RemoteOverride();
  *(openvpn::ClientAPI::RemoteOverride **)&_swig_go_result = (openvpn::ClientAPI::RemoteOverride *)result; 
  return _swig_go_result;
}


void _wrap_delete_ClientAPI_RemoteOverride_ovpncli_f208ab142d9be705(openvpn::ClientAPI::RemoteOverride *_swig_go_0) {
  openvpn::ClientAPI::RemoteOverride *arg1 = (openvpn::ClientAPI::RemoteOverride *) 0 ;
  
  arg1 = *(openvpn::ClientAPI::RemoteOverride **)&_swig_go_0; 
  
  delete arg1;
  
}


openvpn::ClientAPI::OpenVPNClientHelper *_wrap_new_ClientAPI_OpenVPNClientHelper_ovpncli_f208ab142d9be705() {
  openvpn::ClientAPI::OpenVPNClientHelper *result = 0 ;
  openvpn::ClientAPI::OpenVPNClientHelper *_swig_go_result;
  
  
  result = (openvpn::ClientAPI::OpenVPNClientHelper *)new openvpn::ClientAPI::OpenVPNClientHelper();
  *(openvpn::ClientAPI::OpenVPNClientHelper **)&_swig_go_result = (openvpn::ClientAPI::OpenVPNClientHelper *)result; 
  return _swig_go_result;
}


void _wrap_delete_ClientAPI_OpenVPNClientHelper_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClientHelper *_swig_go_0) {
  openvpn::ClientAPI::OpenVPNClientHelper *arg1 = (openvpn::ClientAPI::OpenVPNClientHelper *) 0 ;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClientHelper **)&_swig_go_0; 
  
  delete arg1;
  
}


openvpn::ClientAPI::MergeConfig *_wrap_ClientAPI_OpenVPNClientHelper_merge_config_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClientHelper *_swig_go_0, _gostring_ _swig_go_1, bool _swig_go_2) {
  openvpn::ClientAPI::OpenVPNClientHelper *arg1 = (openvpn::ClientAPI::OpenVPNClientHelper *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  openvpn::ClientAPI::MergeConfig result;
  openvpn::ClientAPI::MergeConfig *_swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClientHelper **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (bool)_swig_go_2; 
  
  result = (arg1)->merge_config((std::string const &)*arg2,arg3);
  *(openvpn::ClientAPI::MergeConfig **)&_swig_go_result = new openvpn::ClientAPI::MergeConfig(result); 
  return _swig_go_result;
}


openvpn::ClientAPI::MergeConfig *_wrap_ClientAPI_OpenVPNClientHelper_merge_config_string_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClientHelper *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::OpenVPNClientHelper *arg1 = (openvpn::ClientAPI::OpenVPNClientHelper *) 0 ;
  std::string *arg2 = 0 ;
  openvpn::ClientAPI::MergeConfig result;
  openvpn::ClientAPI::MergeConfig *_swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClientHelper **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  result = (arg1)->merge_config_string((std::string const &)*arg2);
  *(openvpn::ClientAPI::MergeConfig **)&_swig_go_result = new openvpn::ClientAPI::MergeConfig(result); 
  return _swig_go_result;
}


openvpn::ClientAPI::EvalConfig *_wrap_ClientAPI_OpenVPNClientHelper_eval_config_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClientHelper *_swig_go_0, openvpn::ClientAPI::Config *_swig_go_1) {
  openvpn::ClientAPI::OpenVPNClientHelper *arg1 = (openvpn::ClientAPI::OpenVPNClientHelper *) 0 ;
  openvpn::ClientAPI::Config *arg2 = 0 ;
  openvpn::ClientAPI::EvalConfig result;
  openvpn::ClientAPI::EvalConfig *_swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClientHelper **)&_swig_go_0; 
  arg2 = *(openvpn::ClientAPI::Config **)&_swig_go_1; 
  
  result = (arg1)->eval_config((openvpn::ClientAPI::Config const &)*arg2);
  *(openvpn::ClientAPI::EvalConfig **)&_swig_go_result = new openvpn::ClientAPI::EvalConfig(result); 
  return _swig_go_result;
}


long long _wrap_ClientAPI_OpenVPNClientHelper_max_profile_size_ovpncli_f208ab142d9be705() {
  long result;
  long long _swig_go_result;
  
  
  result = (long)openvpn::ClientAPI::OpenVPNClientHelper::max_profile_size();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ClientAPI_OpenVPNClientHelper_parse_dynamic_challenge_ovpncli_f208ab142d9be705(_gostring_ _swig_go_0, openvpn::ClientAPI::DynamicChallenge *_swig_go_1) {
  std::string *arg1 = 0 ;
  openvpn::ClientAPI::DynamicChallenge *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  arg2 = *(openvpn::ClientAPI::DynamicChallenge **)&_swig_go_1; 
  
  result = (bool)openvpn::ClientAPI::OpenVPNClientHelper::parse_dynamic_challenge((std::string const &)*arg1,*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_ClientAPI_OpenVPNClientHelper_crypto_self_test_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClientHelper *_swig_go_0) {
  openvpn::ClientAPI::OpenVPNClientHelper *arg1 = (openvpn::ClientAPI::OpenVPNClientHelper *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClientHelper **)&_swig_go_0; 
  
  result = (arg1)->crypto_self_test();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ClientAPI_OpenVPNClientHelper_platform_ovpncli_f208ab142d9be705() {
  std::string result;
  _gostring_ _swig_go_result;
  
  
  result = openvpn::ClientAPI::OpenVPNClientHelper::platform();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_ClientAPI_OpenVPNClientHelper_copyright_ovpncli_f208ab142d9be705() {
  std::string result;
  _gostring_ _swig_go_result;
  
  
  result = openvpn::ClientAPI::OpenVPNClientHelper::copyright();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


openvpn::ClientAPI::OpenVPNClient *_wrap__swig_NewDirectorClientAPI_OpenVPNClientClientAPI_OpenVPNClient_ovpncli_f208ab142d9be705(intgo _swig_go_0) {
  int arg1 ;
  openvpn::ClientAPI::OpenVPNClient *result = 0 ;
  openvpn::ClientAPI::OpenVPNClient *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = new SwigDirector_ClientAPI_OpenVPNClient(arg1);
  *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_result = (openvpn::ClientAPI::OpenVPNClient *)result; 
  return _swig_go_result;
}


bool _wrap__swig_DirectorClientAPI_OpenVPNClient_upcall_Tun_builder_new_ovpncli_f208ab142d9be705(SwigDirector_ClientAPI_OpenVPNClient *_swig_go_0) {
  SwigDirector_ClientAPI_OpenVPNClient *arg1 = (SwigDirector_ClientAPI_OpenVPNClient *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(SwigDirector_ClientAPI_OpenVPNClient **)&_swig_go_0; 
  
  result = (bool)arg1->_swig_upcall_tun_builder_new();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap__swig_DirectorClientAPI_OpenVPNClient_upcall_Tun_builder_set_layer_ovpncli_f208ab142d9be705(SwigDirector_ClientAPI_OpenVPNClient *_swig_go_0, intgo _swig_go_1) {
  SwigDirector_ClientAPI_OpenVPNClient *arg1 = (SwigDirector_ClientAPI_OpenVPNClient *) 0 ;
  int arg2 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(SwigDirector_ClientAPI_OpenVPNClient **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (bool)arg1->_swig_upcall_tun_builder_set_layer(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap__swig_DirectorClientAPI_OpenVPNClient_upcall_Tun_builder_set_remote_address_ovpncli_f208ab142d9be705(SwigDirector_ClientAPI_OpenVPNClient *_swig_go_0, _gostring_ _swig_go_1, bool _swig_go_2) {
  SwigDirector_ClientAPI_OpenVPNClient *arg1 = (SwigDirector_ClientAPI_OpenVPNClient *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(SwigDirector_ClientAPI_OpenVPNClient **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (bool)_swig_go_2; 
  
  result = (bool)arg1->_swig_upcall_tun_builder_set_remote_address(*arg2, arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap__swig_DirectorClientAPI_OpenVPNClient_upcall_Tun_builder_add_address_ovpncli_f208ab142d9be705(SwigDirector_ClientAPI_OpenVPNClient *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, _gostring_ _swig_go_3, bool _swig_go_4, bool _swig_go_5) {
  SwigDirector_ClientAPI_OpenVPNClient *arg1 = (SwigDirector_ClientAPI_OpenVPNClient *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  bool arg5 ;
  bool arg6 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(SwigDirector_ClientAPI_OpenVPNClient **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (int)_swig_go_2; 
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  arg5 = (bool)_swig_go_4; 
  arg6 = (bool)_swig_go_5; 
  
  result = (bool)arg1->_swig_upcall_tun_builder_add_address(*arg2, arg3, *arg4, arg5, arg6);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap__swig_DirectorClientAPI_OpenVPNClient_upcall_Tun_builder_set_route_metric_default_ovpncli_f208ab142d9be705(SwigDirector_ClientAPI_OpenVPNClient *_swig_go_0, intgo _swig_go_1) {
  SwigDirector_ClientAPI_OpenVPNClient *arg1 = (SwigDirector_ClientAPI_OpenVPNClient *) 0 ;
  int arg2 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(SwigDirector_ClientAPI_OpenVPNClient **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (bool)arg1->_swig_upcall_tun_builder_set_route_metric_default(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap__swig_DirectorClientAPI_OpenVPNClient_upcall_Tun_builder_reroute_gw_ovpncli_f208ab142d9be705(SwigDirector_ClientAPI_OpenVPNClient *_swig_go_0, bool _swig_go_1, bool _swig_go_2, intgo _swig_go_3) {
  SwigDirector_ClientAPI_OpenVPNClient *arg1 = (SwigDirector_ClientAPI_OpenVPNClient *) 0 ;
  bool arg2 ;
  bool arg3 ;
  unsigned int arg4 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(SwigDirector_ClientAPI_OpenVPNClient **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  arg3 = (bool)_swig_go_2; 
  arg4 = (unsigned int)_swig_go_3; 
  
  result = (bool)arg1->_swig_upcall_tun_builder_reroute_gw(arg2, arg3, arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap__swig_DirectorClientAPI_OpenVPNClient_upcall_Tun_builder_add_route_ovpncli_f208ab142d9be705(SwigDirector_ClientAPI_OpenVPNClient *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, bool _swig_go_4) {
  SwigDirector_ClientAPI_OpenVPNClient *arg1 = (SwigDirector_ClientAPI_OpenVPNClient *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(SwigDirector_ClientAPI_OpenVPNClient **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (int)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  arg5 = (bool)_swig_go_4; 
  
  result = (bool)arg1->_swig_upcall_tun_builder_add_route(*arg2, arg3, arg4, arg5);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap__swig_DirectorClientAPI_OpenVPNClient_upcall_Tun_builder_exclude_route_ovpncli_f208ab142d9be705(SwigDirector_ClientAPI_OpenVPNClient *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, bool _swig_go_4) {
  SwigDirector_ClientAPI_OpenVPNClient *arg1 = (SwigDirector_ClientAPI_OpenVPNClient *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(SwigDirector_ClientAPI_OpenVPNClient **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (int)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  arg5 = (bool)_swig_go_4; 
  
  result = (bool)arg1->_swig_upcall_tun_builder_exclude_route(*arg2, arg3, arg4, arg5);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap__swig_DirectorClientAPI_OpenVPNClient_upcall_Tun_builder_add_dns_server_ovpncli_f208ab142d9be705(SwigDirector_ClientAPI_OpenVPNClient *_swig_go_0, _gostring_ _swig_go_1, bool _swig_go_2) {
  SwigDirector_ClientAPI_OpenVPNClient *arg1 = (SwigDirector_ClientAPI_OpenVPNClient *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(SwigDirector_ClientAPI_OpenVPNClient **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (bool)_swig_go_2; 
  
  result = (bool)arg1->_swig_upcall_tun_builder_add_dns_server(*arg2, arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap__swig_DirectorClientAPI_OpenVPNClient_upcall_Tun_builder_add_search_domain_ovpncli_f208ab142d9be705(SwigDirector_ClientAPI_OpenVPNClient *_swig_go_0, _gostring_ _swig_go_1) {
  SwigDirector_ClientAPI_OpenVPNClient *arg1 = (SwigDirector_ClientAPI_OpenVPNClient *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(SwigDirector_ClientAPI_OpenVPNClient **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  result = (bool)arg1->_swig_upcall_tun_builder_add_search_domain(*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap__swig_DirectorClientAPI_OpenVPNClient_upcall_Tun_builder_set_mtu_ovpncli_f208ab142d9be705(SwigDirector_ClientAPI_OpenVPNClient *_swig_go_0, intgo _swig_go_1) {
  SwigDirector_ClientAPI_OpenVPNClient *arg1 = (SwigDirector_ClientAPI_OpenVPNClient *) 0 ;
  int arg2 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(SwigDirector_ClientAPI_OpenVPNClient **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (bool)arg1->_swig_upcall_tun_builder_set_mtu(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap__swig_DirectorClientAPI_OpenVPNClient_upcall_Tun_builder_set_session_name_ovpncli_f208ab142d9be705(SwigDirector_ClientAPI_OpenVPNClient *_swig_go_0, _gostring_ _swig_go_1) {
  SwigDirector_ClientAPI_OpenVPNClient *arg1 = (SwigDirector_ClientAPI_OpenVPNClient *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(SwigDirector_ClientAPI_OpenVPNClient **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  result = (bool)arg1->_swig_upcall_tun_builder_set_session_name(*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap__swig_DirectorClientAPI_OpenVPNClient_upcall_Tun_builder_add_proxy_bypass_ovpncli_f208ab142d9be705(SwigDirector_ClientAPI_OpenVPNClient *_swig_go_0, _gostring_ _swig_go_1) {
  SwigDirector_ClientAPI_OpenVPNClient *arg1 = (SwigDirector_ClientAPI_OpenVPNClient *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(SwigDirector_ClientAPI_OpenVPNClient **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  result = (bool)arg1->_swig_upcall_tun_builder_add_proxy_bypass(*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap__swig_DirectorClientAPI_OpenVPNClient_upcall_Tun_builder_set_proxy_auto_config_url_ovpncli_f208ab142d9be705(SwigDirector_ClientAPI_OpenVPNClient *_swig_go_0, _gostring_ _swig_go_1) {
  SwigDirector_ClientAPI_OpenVPNClient *arg1 = (SwigDirector_ClientAPI_OpenVPNClient *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(SwigDirector_ClientAPI_OpenVPNClient **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  result = (bool)arg1->_swig_upcall_tun_builder_set_proxy_auto_config_url(*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap__swig_DirectorClientAPI_OpenVPNClient_upcall_Tun_builder_set_proxy_http_ovpncli_f208ab142d9be705(SwigDirector_ClientAPI_OpenVPNClient *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  SwigDirector_ClientAPI_OpenVPNClient *arg1 = (SwigDirector_ClientAPI_OpenVPNClient *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(SwigDirector_ClientAPI_OpenVPNClient **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (int)_swig_go_2; 
  
  result = (bool)arg1->_swig_upcall_tun_builder_set_proxy_http(*arg2, arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap__swig_DirectorClientAPI_OpenVPNClient_upcall_Tun_builder_set_proxy_https_ovpncli_f208ab142d9be705(SwigDirector_ClientAPI_OpenVPNClient *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  SwigDirector_ClientAPI_OpenVPNClient *arg1 = (SwigDirector_ClientAPI_OpenVPNClient *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(SwigDirector_ClientAPI_OpenVPNClient **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (int)_swig_go_2; 
  
  result = (bool)arg1->_swig_upcall_tun_builder_set_proxy_https(*arg2, arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap__swig_DirectorClientAPI_OpenVPNClient_upcall_Tun_builder_add_wins_server_ovpncli_f208ab142d9be705(SwigDirector_ClientAPI_OpenVPNClient *_swig_go_0, _gostring_ _swig_go_1) {
  SwigDirector_ClientAPI_OpenVPNClient *arg1 = (SwigDirector_ClientAPI_OpenVPNClient *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(SwigDirector_ClientAPI_OpenVPNClient **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  result = (bool)arg1->_swig_upcall_tun_builder_add_wins_server(*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap__swig_DirectorClientAPI_OpenVPNClient_upcall_Tun_builder_set_allow_family_ovpncli_f208ab142d9be705(SwigDirector_ClientAPI_OpenVPNClient *_swig_go_0, intgo _swig_go_1, bool _swig_go_2) {
  SwigDirector_ClientAPI_OpenVPNClient *arg1 = (SwigDirector_ClientAPI_OpenVPNClient *) 0 ;
  int arg2 ;
  bool arg3 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(SwigDirector_ClientAPI_OpenVPNClient **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (bool)_swig_go_2; 
  
  result = (bool)arg1->_swig_upcall_tun_builder_set_allow_family(arg2, arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap__swig_DirectorClientAPI_OpenVPNClient_upcall_Tun_builder_set_adapter_domain_suffix_ovpncli_f208ab142d9be705(SwigDirector_ClientAPI_OpenVPNClient *_swig_go_0, _gostring_ _swig_go_1) {
  SwigDirector_ClientAPI_OpenVPNClient *arg1 = (SwigDirector_ClientAPI_OpenVPNClient *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(SwigDirector_ClientAPI_OpenVPNClient **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  result = (bool)arg1->_swig_upcall_tun_builder_set_adapter_domain_suffix(*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap__swig_DirectorClientAPI_OpenVPNClient_upcall_Tun_builder_establish_ovpncli_f208ab142d9be705(SwigDirector_ClientAPI_OpenVPNClient *_swig_go_0) {
  SwigDirector_ClientAPI_OpenVPNClient *arg1 = (SwigDirector_ClientAPI_OpenVPNClient *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(SwigDirector_ClientAPI_OpenVPNClient **)&_swig_go_0; 
  
  result = (int)arg1->_swig_upcall_tun_builder_establish();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap__swig_DirectorClientAPI_OpenVPNClient_upcall_Tun_builder_persist_ovpncli_f208ab142d9be705(SwigDirector_ClientAPI_OpenVPNClient *_swig_go_0) {
  SwigDirector_ClientAPI_OpenVPNClient *arg1 = (SwigDirector_ClientAPI_OpenVPNClient *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(SwigDirector_ClientAPI_OpenVPNClient **)&_swig_go_0; 
  
  result = (bool)arg1->_swig_upcall_tun_builder_persist();
  _swig_go_result = result; 
  return _swig_go_result;
}


std::vector< std::string > *_wrap__swig_DirectorClientAPI_OpenVPNClient_upcall_Tun_builder_get_local_networks_ovpncli_f208ab142d9be705(SwigDirector_ClientAPI_OpenVPNClient *_swig_go_0, bool _swig_go_1) {
  SwigDirector_ClientAPI_OpenVPNClient *arg1 = (SwigDirector_ClientAPI_OpenVPNClient *) 0 ;
  bool arg2 ;
  std::vector< std::string > result;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(SwigDirector_ClientAPI_OpenVPNClient **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  result = (std::vector< std::string >)arg1->_swig_upcall_tun_builder_get_local_networks(arg2);
  *(std::vector< std::string > **)&_swig_go_result = new std::vector< std::string >(result); 
  return _swig_go_result;
}


void _wrap__swig_DirectorClientAPI_OpenVPNClient_upcall_Tun_builder_establish_lite_ovpncli_f208ab142d9be705(SwigDirector_ClientAPI_OpenVPNClient *_swig_go_0) {
  SwigDirector_ClientAPI_OpenVPNClient *arg1 = (SwigDirector_ClientAPI_OpenVPNClient *) 0 ;
  
  arg1 = *(SwigDirector_ClientAPI_OpenVPNClient **)&_swig_go_0; 
  
  arg1->_swig_upcall_tun_builder_establish_lite();
  
}


void _wrap__swig_DirectorClientAPI_OpenVPNClient_upcall_Tun_builder_teardown_ovpncli_f208ab142d9be705(SwigDirector_ClientAPI_OpenVPNClient *_swig_go_0, bool _swig_go_1) {
  SwigDirector_ClientAPI_OpenVPNClient *arg1 = (SwigDirector_ClientAPI_OpenVPNClient *) 0 ;
  bool arg2 ;
  
  arg1 = *(SwigDirector_ClientAPI_OpenVPNClient **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  arg1->_swig_upcall_tun_builder_teardown(arg2);
  
}


void _wrap_DeleteDirectorClientAPI_OpenVPNClient_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClient *_swig_go_0) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_0; 
  
  delete arg1;
  
}


bool _wrap__swig_DirectorClientAPI_OpenVPNClient_upcall_Socket_protect_ovpncli_f208ab142d9be705(SwigDirector_ClientAPI_OpenVPNClient *_swig_go_0, intgo _swig_go_1, _gostring_ _swig_go_2, bool _swig_go_3) {
  SwigDirector_ClientAPI_OpenVPNClient *arg1 = (SwigDirector_ClientAPI_OpenVPNClient *) 0 ;
  int arg2 ;
  std::string arg3 ;
  bool arg4 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(SwigDirector_ClientAPI_OpenVPNClient **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  (&arg3)->assign(_swig_go_2.p, _swig_go_2.n); 
  arg4 = (bool)_swig_go_3; 
  
  result = (bool)arg1->_swig_upcall_socket_protect(arg2, arg3, arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap__swig_DirectorClientAPI_OpenVPNClient_upcall_Remote_override_enabled_ovpncli_f208ab142d9be705(SwigDirector_ClientAPI_OpenVPNClient *_swig_go_0) {
  SwigDirector_ClientAPI_OpenVPNClient *arg1 = (SwigDirector_ClientAPI_OpenVPNClient *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(SwigDirector_ClientAPI_OpenVPNClient **)&_swig_go_0; 
  
  result = (bool)arg1->_swig_upcall_remote_override_enabled();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap__swig_DirectorClientAPI_OpenVPNClient_upcall_Remote_override_ovpncli_f208ab142d9be705(SwigDirector_ClientAPI_OpenVPNClient *_swig_go_0, openvpn::ClientAPI::RemoteOverride *_swig_go_1) {
  SwigDirector_ClientAPI_OpenVPNClient *arg1 = (SwigDirector_ClientAPI_OpenVPNClient *) 0 ;
  openvpn::ClientAPI::RemoteOverride *arg2 = 0 ;
  
  arg1 = *(SwigDirector_ClientAPI_OpenVPNClient **)&_swig_go_0; 
  arg2 = *(openvpn::ClientAPI::RemoteOverride **)&_swig_go_1; 
  
  arg1->_swig_upcall_remote_override(*arg2);
  
}


void _wrap__swig_DirectorClientAPI_OpenVPNClient_upcall_Clock_tick_ovpncli_f208ab142d9be705(SwigDirector_ClientAPI_OpenVPNClient *_swig_go_0) {
  SwigDirector_ClientAPI_OpenVPNClient *arg1 = (SwigDirector_ClientAPI_OpenVPNClient *) 0 ;
  
  arg1 = *(SwigDirector_ClientAPI_OpenVPNClient **)&_swig_go_0; 
  
  arg1->_swig_upcall_clock_tick();
  
}


void _wrap__swig_DirectorClientAPI_OpenVPNClient_upcall_Connect_attach_ovpncli_f208ab142d9be705(SwigDirector_ClientAPI_OpenVPNClient *_swig_go_0) {
  SwigDirector_ClientAPI_OpenVPNClient *arg1 = (SwigDirector_ClientAPI_OpenVPNClient *) 0 ;
  SwigDirector_ClientAPI_OpenVPNClient *darg = 0;
  
  arg1 = *(SwigDirector_ClientAPI_OpenVPNClient **)&_swig_go_0; 
  
  darg = dynamic_cast<SwigDirector_ClientAPI_OpenVPNClient *>(arg1);
  arg1->_swig_upcall_connect_attach();
  
}


void _wrap__swig_DirectorClientAPI_OpenVPNClient_upcall_Connect_pre_run_ovpncli_f208ab142d9be705(SwigDirector_ClientAPI_OpenVPNClient *_swig_go_0) {
  SwigDirector_ClientAPI_OpenVPNClient *arg1 = (SwigDirector_ClientAPI_OpenVPNClient *) 0 ;
  SwigDirector_ClientAPI_OpenVPNClient *darg = 0;
  
  arg1 = *(SwigDirector_ClientAPI_OpenVPNClient **)&_swig_go_0; 
  
  darg = dynamic_cast<SwigDirector_ClientAPI_OpenVPNClient *>(arg1);
  arg1->_swig_upcall_connect_pre_run();
  
}


void _wrap__swig_DirectorClientAPI_OpenVPNClient_upcall_Connect_run_ovpncli_f208ab142d9be705(SwigDirector_ClientAPI_OpenVPNClient *_swig_go_0) {
  SwigDirector_ClientAPI_OpenVPNClient *arg1 = (SwigDirector_ClientAPI_OpenVPNClient *) 0 ;
  SwigDirector_ClientAPI_OpenVPNClient *darg = 0;
  
  arg1 = *(SwigDirector_ClientAPI_OpenVPNClient **)&_swig_go_0; 
  
  darg = dynamic_cast<SwigDirector_ClientAPI_OpenVPNClient *>(arg1);
  arg1->_swig_upcall_connect_run();
  
}


void _wrap__swig_DirectorClientAPI_OpenVPNClient_upcall_Connect_session_stop_ovpncli_f208ab142d9be705(SwigDirector_ClientAPI_OpenVPNClient *_swig_go_0) {
  SwigDirector_ClientAPI_OpenVPNClient *arg1 = (SwigDirector_ClientAPI_OpenVPNClient *) 0 ;
  SwigDirector_ClientAPI_OpenVPNClient *darg = 0;
  
  arg1 = *(SwigDirector_ClientAPI_OpenVPNClient **)&_swig_go_0; 
  
  darg = dynamic_cast<SwigDirector_ClientAPI_OpenVPNClient *>(arg1);
  arg1->_swig_upcall_connect_session_stop();
  
}


openvpn::Stop *_wrap__swig_DirectorClientAPI_OpenVPNClient_upcall_Get_async_stop_ovpncli_f208ab142d9be705(SwigDirector_ClientAPI_OpenVPNClient *_swig_go_0) {
  SwigDirector_ClientAPI_OpenVPNClient *arg1 = (SwigDirector_ClientAPI_OpenVPNClient *) 0 ;
  openvpn::Stop *result = 0 ;
  openvpn::Stop *_swig_go_result;
  SwigDirector_ClientAPI_OpenVPNClient *darg = 0;
  
  arg1 = *(SwigDirector_ClientAPI_OpenVPNClient **)&_swig_go_0; 
  
  darg = dynamic_cast<SwigDirector_ClientAPI_OpenVPNClient *>(arg1);
  result = (openvpn::Stop *)arg1->_swig_upcall_get_async_stop();
  *(openvpn::Stop **)&_swig_go_result = (openvpn::Stop *)result; 
  return _swig_go_result;
}


void _wrap_delete_ClientAPI_OpenVPNClient_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClient *_swig_go_0) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_0; 
  
  delete arg1;
  
}


openvpn::ClientAPI::EvalConfig *_wrap_ClientAPI_OpenVPNClient_eval_config_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClient *_swig_go_0, openvpn::ClientAPI::Config *_swig_go_1) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  openvpn::ClientAPI::Config *arg2 = 0 ;
  openvpn::ClientAPI::EvalConfig result;
  openvpn::ClientAPI::EvalConfig *_swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_0; 
  arg2 = *(openvpn::ClientAPI::Config **)&_swig_go_1; 
  
  result = (arg1)->eval_config((openvpn::ClientAPI::Config const &)*arg2);
  *(openvpn::ClientAPI::EvalConfig **)&_swig_go_result = new openvpn::ClientAPI::EvalConfig(result); 
  return _swig_go_result;
}


openvpn::ClientAPI::Status *_wrap_ClientAPI_OpenVPNClient_provide_creds_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClient *_swig_go_0, openvpn::ClientAPI::ProvideCreds *_swig_go_1) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  openvpn::ClientAPI::ProvideCreds *arg2 = 0 ;
  openvpn::ClientAPI::Status result;
  openvpn::ClientAPI::Status *_swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_0; 
  arg2 = *(openvpn::ClientAPI::ProvideCreds **)&_swig_go_1; 
  
  result = (arg1)->provide_creds((openvpn::ClientAPI::ProvideCreds const &)*arg2);
  *(openvpn::ClientAPI::Status **)&_swig_go_result = new openvpn::ClientAPI::Status(result); 
  return _swig_go_result;
}


bool _wrap_ClientAPI_OpenVPNClient_socket_protect_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClient *_swig_go_0, intgo _swig_go_1, _gostring_ _swig_go_2, bool _swig_go_3) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  int arg2 ;
  std::string arg3 ;
  bool arg4 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  (&arg3)->assign(_swig_go_2.p, _swig_go_2.n); 
  arg4 = (bool)_swig_go_3; 
  
  result = (bool)(arg1)->socket_protect(arg2,arg3,arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


openvpn::ClientAPI::Status *_wrap_ClientAPI_OpenVPNClient_connect_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClient *_swig_go_0) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  openvpn::ClientAPI::Status result;
  openvpn::ClientAPI::Status *_swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_0; 
  
  result = (arg1)->connect();
  *(openvpn::ClientAPI::Status **)&_swig_go_result = new openvpn::ClientAPI::Status(result); 
  return _swig_go_result;
}


openvpn::ClientAPI::ConnectionInfo *_wrap_ClientAPI_OpenVPNClient_connection_info_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClient *_swig_go_0) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  openvpn::ClientAPI::ConnectionInfo result;
  openvpn::ClientAPI::ConnectionInfo *_swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_0; 
  
  result = (arg1)->connection_info();
  *(openvpn::ClientAPI::ConnectionInfo **)&_swig_go_result = new openvpn::ClientAPI::ConnectionInfo(result); 
  return _swig_go_result;
}


bool _wrap_ClientAPI_OpenVPNClient_session_token_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClient *_swig_go_0, openvpn::ClientAPI::SessionToken *_swig_go_1) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  openvpn::ClientAPI::SessionToken *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_0; 
  arg2 = *(openvpn::ClientAPI::SessionToken **)&_swig_go_1; 
  
  result = (bool)(arg1)->session_token(*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_OpenVPNClient_stop_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClient *_swig_go_0) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_0; 
  
  (arg1)->stop();
  
}


void _wrap_ClientAPI_OpenVPNClient_pause_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClient *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  (arg1)->pause((std::string const &)*arg2);
  
}


void _wrap_ClientAPI_OpenVPNClient_resume_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClient *_swig_go_0) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_0; 
  
  (arg1)->resume();
  
}


void _wrap_ClientAPI_OpenVPNClient_reconnect_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClient *_swig_go_0, intgo _swig_go_1) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  int arg2 ;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  (arg1)->reconnect(arg2);
  
}


bool _wrap_ClientAPI_OpenVPNClient_pause_on_connection_timeout_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClient *_swig_go_0) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_0; 
  
  result = (bool)(arg1)->pause_on_connection_timeout();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_ClientAPI_OpenVPNClient_stats_n_ovpncli_f208ab142d9be705() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)openvpn::ClientAPI::OpenVPNClient::stats_n();
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_ClientAPI_OpenVPNClient_stats_name_ovpncli_f208ab142d9be705(intgo _swig_go_0) {
  int arg1 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = openvpn::ClientAPI::OpenVPNClient::stats_name(arg1);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


long long _wrap_ClientAPI_OpenVPNClient_stats_value_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClient *_swig_go_0, intgo _swig_go_1) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  int arg2 ;
  long long result;
  long long _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (long long)((openvpn::ClientAPI::OpenVPNClient const *)arg1)->stats_value(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


std::vector< long long > *_wrap_ClientAPI_OpenVPNClient_stats_bundle_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClient *_swig_go_0) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  std::vector< long long > result;
  std::vector< long long > *_swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_0; 
  
  result = ((openvpn::ClientAPI::OpenVPNClient const *)arg1)->stats_bundle();
  *(std::vector< long long > **)&_swig_go_result = new std::vector< long long >(result); 
  return _swig_go_result;
}


openvpn::ClientAPI::InterfaceStats *_wrap_ClientAPI_OpenVPNClient_tun_stats_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClient *_swig_go_0) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  openvpn::ClientAPI::InterfaceStats result;
  openvpn::ClientAPI::InterfaceStats *_swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_0; 
  
  result = ((openvpn::ClientAPI::OpenVPNClient const *)arg1)->tun_stats();
  *(openvpn::ClientAPI::InterfaceStats **)&_swig_go_result = new openvpn::ClientAPI::InterfaceStats(result); 
  return _swig_go_result;
}


openvpn::ClientAPI::TransportStats *_wrap_ClientAPI_OpenVPNClient_transport_stats_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClient *_swig_go_0) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  openvpn::ClientAPI::TransportStats result;
  openvpn::ClientAPI::TransportStats *_swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_0; 
  
  result = ((openvpn::ClientAPI::OpenVPNClient const *)arg1)->transport_stats();
  *(openvpn::ClientAPI::TransportStats **)&_swig_go_result = new openvpn::ClientAPI::TransportStats(result); 
  return _swig_go_result;
}


void _wrap_ClientAPI_OpenVPNClient_post_cc_msg_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClient *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  (arg1)->post_cc_msg((std::string const &)*arg2);
  
}


void _wrap_ClientAPI_OpenVPNClient_event_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClient *_swig_go_0, openvpn::ClientAPI::Event *_swig_go_1) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  openvpn::ClientAPI::Event *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_0; 
  arg2 = *(openvpn::ClientAPI::Event **)&_swig_go_1; 
  
  (arg1)->event((openvpn::ClientAPI::Event const &)*arg2);
  
}


void _wrap_ClientAPI_OpenVPNClient_log_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClient *_swig_go_0, openvpn::ClientAPI::LogInfo *_swig_go_1) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  openvpn::ClientAPI::LogInfo *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_0; 
  arg2 = *(openvpn::ClientAPI::LogInfo **)&_swig_go_1; 
  
  (arg1)->log((openvpn::ClientAPI::LogInfo const &)*arg2);
  
}


void _wrap_ClientAPI_OpenVPNClient_external_pki_cert_request_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClient *_swig_go_0, openvpn::ClientAPI::ExternalPKICertRequest *_swig_go_1) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  openvpn::ClientAPI::ExternalPKICertRequest *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_0; 
  arg2 = *(openvpn::ClientAPI::ExternalPKICertRequest **)&_swig_go_1; 
  
  (arg1)->external_pki_cert_request(*arg2);
  
}


void _wrap_ClientAPI_OpenVPNClient_external_pki_sign_request_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClient *_swig_go_0, openvpn::ClientAPI::ExternalPKISignRequest *_swig_go_1) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  openvpn::ClientAPI::ExternalPKISignRequest *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_0; 
  arg2 = *(openvpn::ClientAPI::ExternalPKISignRequest **)&_swig_go_1; 
  
  (arg1)->external_pki_sign_request(*arg2);
  
}


bool _wrap_ClientAPI_OpenVPNClient_remote_override_enabled_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClient *_swig_go_0) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_0; 
  
  result = (bool)(arg1)->remote_override_enabled();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ClientAPI_OpenVPNClient_remote_override_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClient *_swig_go_0, openvpn::ClientAPI::RemoteOverride *_swig_go_1) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  openvpn::ClientAPI::RemoteOverride *arg2 = 0 ;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_0; 
  arg2 = *(openvpn::ClientAPI::RemoteOverride **)&_swig_go_1; 
  
  (arg1)->remote_override(*arg2);
  
}


void _wrap_ClientAPI_OpenVPNClient_clock_tick_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClient *_swig_go_0) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_0; 
  
  (arg1)->clock_tick();
  
}


bool _wrap_ClientAPI_OpenVPNClient_tun_builder_new_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClient *_swig_go_0) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_0; 
  
  openvpn::TunBuilderBase *swig_b0 = (openvpn::TunBuilderBase *)arg1;
  result = (bool)(swig_b0)->tun_builder_new();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ClientAPI_OpenVPNClient_tun_builder_set_layer_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClient *_swig_go_0, intgo _swig_go_1) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  int arg2 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  openvpn::TunBuilderBase *swig_b0 = (openvpn::TunBuilderBase *)arg1;
  result = (bool)(swig_b0)->tun_builder_set_layer(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ClientAPI_OpenVPNClient_tun_builder_set_remote_address_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClient *_swig_go_0, _gostring_ _swig_go_1, bool _swig_go_2) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (bool)_swig_go_2; 
  
  openvpn::TunBuilderBase *swig_b0 = (openvpn::TunBuilderBase *)arg1;
  result = (bool)(swig_b0)->tun_builder_set_remote_address((std::string const &)*arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ClientAPI_OpenVPNClient_tun_builder_add_address_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClient *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, _gostring_ _swig_go_3, bool _swig_go_4, bool _swig_go_5) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  bool arg5 ;
  bool arg6 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (int)_swig_go_2; 
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  arg5 = (bool)_swig_go_4; 
  arg6 = (bool)_swig_go_5; 
  
  openvpn::TunBuilderBase *swig_b0 = (openvpn::TunBuilderBase *)arg1;
  result = (bool)(swig_b0)->tun_builder_add_address((std::string const &)*arg2,arg3,(std::string const &)*arg4,arg5,arg6);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ClientAPI_OpenVPNClient_tun_builder_set_route_metric_default_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClient *_swig_go_0, intgo _swig_go_1) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  int arg2 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  openvpn::TunBuilderBase *swig_b0 = (openvpn::TunBuilderBase *)arg1;
  result = (bool)(swig_b0)->tun_builder_set_route_metric_default(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ClientAPI_OpenVPNClient_tun_builder_reroute_gw_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClient *_swig_go_0, bool _swig_go_1, bool _swig_go_2, intgo _swig_go_3) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  bool arg2 ;
  bool arg3 ;
  unsigned int arg4 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  arg3 = (bool)_swig_go_2; 
  arg4 = (unsigned int)_swig_go_3; 
  
  openvpn::TunBuilderBase *swig_b0 = (openvpn::TunBuilderBase *)arg1;
  result = (bool)(swig_b0)->tun_builder_reroute_gw(arg2,arg3,arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ClientAPI_OpenVPNClient_tun_builder_add_route_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClient *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, bool _swig_go_4) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (int)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  arg5 = (bool)_swig_go_4; 
  
  openvpn::TunBuilderBase *swig_b0 = (openvpn::TunBuilderBase *)arg1;
  result = (bool)(swig_b0)->tun_builder_add_route((std::string const &)*arg2,arg3,arg4,arg5);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ClientAPI_OpenVPNClient_tun_builder_exclude_route_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClient *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, intgo _swig_go_3, bool _swig_go_4) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (int)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  arg5 = (bool)_swig_go_4; 
  
  openvpn::TunBuilderBase *swig_b0 = (openvpn::TunBuilderBase *)arg1;
  result = (bool)(swig_b0)->tun_builder_exclude_route((std::string const &)*arg2,arg3,arg4,arg5);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ClientAPI_OpenVPNClient_tun_builder_add_dns_server_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClient *_swig_go_0, _gostring_ _swig_go_1, bool _swig_go_2) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (bool)_swig_go_2; 
  
  openvpn::TunBuilderBase *swig_b0 = (openvpn::TunBuilderBase *)arg1;
  result = (bool)(swig_b0)->tun_builder_add_dns_server((std::string const &)*arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ClientAPI_OpenVPNClient_tun_builder_add_search_domain_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClient *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  openvpn::TunBuilderBase *swig_b0 = (openvpn::TunBuilderBase *)arg1;
  result = (bool)(swig_b0)->tun_builder_add_search_domain((std::string const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ClientAPI_OpenVPNClient_tun_builder_set_mtu_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClient *_swig_go_0, intgo _swig_go_1) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  int arg2 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  openvpn::TunBuilderBase *swig_b0 = (openvpn::TunBuilderBase *)arg1;
  result = (bool)(swig_b0)->tun_builder_set_mtu(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ClientAPI_OpenVPNClient_tun_builder_set_session_name_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClient *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  openvpn::TunBuilderBase *swig_b0 = (openvpn::TunBuilderBase *)arg1;
  result = (bool)(swig_b0)->tun_builder_set_session_name((std::string const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ClientAPI_OpenVPNClient_tun_builder_add_proxy_bypass_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClient *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  openvpn::TunBuilderBase *swig_b0 = (openvpn::TunBuilderBase *)arg1;
  result = (bool)(swig_b0)->tun_builder_add_proxy_bypass((std::string const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ClientAPI_OpenVPNClient_tun_builder_set_proxy_auto_config_url_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClient *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  openvpn::TunBuilderBase *swig_b0 = (openvpn::TunBuilderBase *)arg1;
  result = (bool)(swig_b0)->tun_builder_set_proxy_auto_config_url((std::string const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ClientAPI_OpenVPNClient_tun_builder_set_proxy_http_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClient *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (int)_swig_go_2; 
  
  openvpn::TunBuilderBase *swig_b0 = (openvpn::TunBuilderBase *)arg1;
  result = (bool)(swig_b0)->tun_builder_set_proxy_http((std::string const &)*arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ClientAPI_OpenVPNClient_tun_builder_set_proxy_https_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClient *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = (int)_swig_go_2; 
  
  openvpn::TunBuilderBase *swig_b0 = (openvpn::TunBuilderBase *)arg1;
  result = (bool)(swig_b0)->tun_builder_set_proxy_https((std::string const &)*arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ClientAPI_OpenVPNClient_tun_builder_add_wins_server_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClient *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  openvpn::TunBuilderBase *swig_b0 = (openvpn::TunBuilderBase *)arg1;
  result = (bool)(swig_b0)->tun_builder_add_wins_server((std::string const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ClientAPI_OpenVPNClient_tun_builder_set_allow_family_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClient *_swig_go_0, intgo _swig_go_1, bool _swig_go_2) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  int arg2 ;
  bool arg3 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (bool)_swig_go_2; 
  
  openvpn::TunBuilderBase *swig_b0 = (openvpn::TunBuilderBase *)arg1;
  result = (bool)(swig_b0)->tun_builder_set_allow_family(arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ClientAPI_OpenVPNClient_tun_builder_set_adapter_domain_suffix_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClient *_swig_go_0, _gostring_ _swig_go_1) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  openvpn::TunBuilderBase *swig_b0 = (openvpn::TunBuilderBase *)arg1;
  result = (bool)(swig_b0)->tun_builder_set_adapter_domain_suffix((std::string const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_ClientAPI_OpenVPNClient_tun_builder_establish_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClient *_swig_go_0) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_0; 
  
  openvpn::TunBuilderBase *swig_b0 = (openvpn::TunBuilderBase *)arg1;
  result = (int)(swig_b0)->tun_builder_establish();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ClientAPI_OpenVPNClient_tun_builder_persist_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClient *_swig_go_0) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_0; 
  
  openvpn::TunBuilderBase *swig_b0 = (openvpn::TunBuilderBase *)arg1;
  result = (bool)(swig_b0)->tun_builder_persist();
  _swig_go_result = result; 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_ClientAPI_OpenVPNClient_tun_builder_get_local_networks_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClient *_swig_go_0, bool _swig_go_1) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  bool arg2 ;
  std::vector< std::string > result;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  openvpn::TunBuilderBase *swig_b0 = (openvpn::TunBuilderBase *)arg1;
  result = (swig_b0)->tun_builder_get_local_networks(arg2);
  *(std::vector< std::string > **)&_swig_go_result = new std::vector< std::string >(result); 
  return _swig_go_result;
}


void _wrap_ClientAPI_OpenVPNClient_tun_builder_establish_lite_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClient *_swig_go_0) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_0; 
  
  openvpn::TunBuilderBase *swig_b0 = (openvpn::TunBuilderBase *)arg1;
  (swig_b0)->tun_builder_establish_lite();
  
}


void _wrap_ClientAPI_OpenVPNClient_tun_builder_teardown_ovpncli_f208ab142d9be705(openvpn::ClientAPI::OpenVPNClient *_swig_go_0, bool _swig_go_1) {
  openvpn::ClientAPI::OpenVPNClient *arg1 = (openvpn::ClientAPI::OpenVPNClient *) 0 ;
  bool arg2 ;
  
  arg1 = *(openvpn::ClientAPI::OpenVPNClient **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  openvpn::TunBuilderBase *swig_b0 = (openvpn::TunBuilderBase *)arg1;
  (swig_b0)->tun_builder_teardown(arg2);
  
}


#ifdef __cplusplus
}
#endif

